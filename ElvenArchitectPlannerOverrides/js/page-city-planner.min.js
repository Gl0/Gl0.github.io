let page_city_planner = {
    settings: {
        expansions: {
            cells: {
                x: 5,
                y: 5
            }
        },
        sizes: {
            cell: {
                default: 22,
                step: 4,
                min: 14,
                max: 30
            }
        },
        classes: {
            expansion: "expansion",
            building: "building"
        },
        ajaxUrls: {
            gameStartupGet: "/json/city-planner-game.{0}.json",
            userStartupPost: "/api/city/planner/userstartup/"
        },
        races: {
            player: ["humans", "elves"],
            guest: ["dwarfs", "fairies", "orcs", "gr4", "gr5", "gr6", "gr7", "gr8", "gr9", "gr10", "gr11", "ch17", "ch18", "ch19", "ch20", "ch21", "ch22", "ch23"],
            all: ["all"]
        },
        report: {
            levels: ["population", "culture", "prosperity"],
            production: ["money", "supplies", "orcs", "mana", "seeds", "unurium", "marble", "steel", "planks", "crystal", "scrolls", "silk", "elixir", "magic_dust", "gems", "sentientmarble", "sentientsteel", "sentientplanks", "sentientcrystal", "sentientscrolls", "sentientsilk", "sentientelixir", "sentientmagic_dust", "sentientgems"]
        },
        cookies: {
            options: "ea-cp-options",
            expires: 365,
            path: "/city/planner/"
        },
        localStorage: {
            keys: {
                data: "cityplanner_data",
                lastModified: "cityplanner_lastmodified"
            }
        }
    },
    options: {
        highlight: void 0,
        showLevels: !0,
        showTiers: !1,
        confirmBuildings: !0,
        confirmStreets: !1,
        reportIgnoreOutside: !1,
        rotateMap: !1,
        cellSize: 0
    },
    enums: {
        mode: {
            none: 0,
            expand: 1,
            build: 2,
            sell: 3,
            move: 4
        }
    },
    constants: {
        time: {
            secondsPer1m: 60,
            secondsPer5m: 300,
            secondsPer15m: 900,
            secondsPer1h: 3600,
            secondsPer3h: 10800,
            secondsPer9h: 32400,
            secondsPer12h: 43200,
            secondsPer1d: 86400,
            secondsPer2d: 172800,
            secondsPer4d: 345600
        }
    },
    variables: {
        locale: "en",
        gameVersion: "",
        rotatedHeight: 0,
        mode: 0,
        mapDragging: !1,
        unsavedChanges: !1
    },
    elements: {
        planner: void 0,
        plannerEditor: void 0,
        plannerReport: void 0,
        plannerMenu: void 0,
        plannerSettings: void 0,
        mapContainer: void 0,
        map: void 0,
        mapExpansions: void 0,
        mapBuildings: void 0,
        expansionMenu: void 0,
        buildingMenu: void 0,
        raceModal: void 0,
        loadingModal: void 0,
        loadingFailedModal: void 0,
        loadingNotFoundModal: void 0,
        buildModal: void 0,
        sellModal: void 0,
        macrosModal: void 0,
        helpModal: void 0,
        saveModal: void 0,
        relicsModal: void 0,
        provisionModal: void 0,
        productionModal: void 0,
        trainingModal: void 0,
        wondersModal: void 0,
        restorationModal: void 0,
        tipsTemplate: void 0,
        tipTemplate: void 0,
        buildTemplate: void 0,
        extraTemplate: void 0,
        expansionTemplate: void 0,
        buildingTemplate: void 0,
        resourcesData: void 0,
        tipsData: void 0,
        loadData: void 0,
        csfrToken: void 0
    },
    templates: {
        tips: void 0,
        tip: void 0,
        build: void 0,
        extra: void 0,
        building: void 0,
        provisionTable: void 0
    },
    data: {
        resources: void 0,
        tips: void 0,
        load: void 0
    },
    game: {},
    userStartupDefault: {
        city_map: {
            unlocked_areas: [{
                x: 15,
                y: 0,
                width: 10,
                length: 15
            }],
            entities: []
        },
        user_data: {
            race: ""
        },
        ea_data: {
            cultureBonus: 1,
            completedProvinces: 0,
            battleSquadsize: 0,
            encountersPoints: 0,
            tournamentPoints: 0,
            producing: [],
            relicCounts: [],
            relicBoosts: []
        }
    },
    userStartup: {},
    ready: function(e, t) {
        this.variables.locale = e,
        this.variables.gameVersion = t,
        this.init(),
        this.initElements(),
        this.initTemplates(),
        this.initData(),
        this.initOptions(),
        this.initEditor(),
        this.initReport(),
        this.initMenu(),
        this.initContextMenus(),
        this.initSettings(),
        this.initMap(),
        this.initRaceModal(),
        this.initLoadingModal(),
        this.initLoadingFailedModal(),
        this.initLoadingNotFoundModal(),
        this.initUnsavedModal(),
        this.initBuildModal(),
        this.initSellModal(),
        this.initMacrosModal(),
        this.initHelpModal(),
        this.initSaveModal(),
        this.initRelicsModal(),
        this.initProvisionModal(),
        this.initProductionModal(),
        this.initTrainingModal(),
        this.initWondersModal(),
        this.initRestorationModal(),
        this.load()
    },
    init: function() {
        this.options.cellSize = this.settings.sizes.cell.default,
        this.variables.locale = this.variables.locale || "en",
        this.userStartup = $.extend(!0, {}, this.userStartupDefault)
    },
    initElements: function() {
        this.elements.window = $(window),
        this.elements.planner = $("#planner"),
        this.elements.plannerEditor = $("#plannerEditor", this.elements.planner),
        this.elements.plannerReport = $("#plannerReport", this.elements.planner),
        this.elements.plannerMenu = $("#plannerMenu"),
        this.elements.plannerSettings = $("#plannerSettings"),
        this.elements.mapContainer = $("#mapContainer", this.elements.plannerEditor),
        this.elements.map = $("#map", this.elements.plannerEditor),
        this.elements.mapExpansions = $("#mapExpansions", this.elements.plannerEditor),
        this.elements.mapBuildings = $("#mapBuildings", this.elements.plannerEditor),
        this.elements.expansionMenu = $("#expansionMenu"),
        this.elements.buildingMenu = $("#buildingMenu"),
        this.elements.raceModal = $("#raceModal"),
        this.elements.loadingModal = $("#loadingModal"),
        this.elements.loadingFailedModal = $("#loadingFailedModal"),
        this.elements.loadingNotFoundModal = $("#loadingNotFoundModal"),
        this.elements.unsavedModal = $("#unsavedModal"),
        this.elements.buildModal = $("#buildModal"),
        this.elements.sellModal = $("#sellModal"),
        this.elements.macrosModal = $("#macrosModal"),
        this.elements.helpModal = $("#helpModal"),
        this.elements.saveModal = $("#saveModal"),
        this.elements.relicsModal = $("#relicsModal"),
        this.elements.provisionModal = $("#provisionModal"),
        this.elements.productionModal = $("#productionModal"),
        this.elements.trainingModal = $("#trainingModal"),
        this.elements.wondersModal = $("#wondersModal"),
        this.elements.restorationModal = $("#restorationModal"),
        this.elements.tipsTemplate = $("#tipsTemplate"),
        this.elements.tipTemplate = $("#tipTemplate"),
        this.elements.buildTemplate = $("#buildTemplate"),
        this.elements.extraTemplate = $("#extraTemplate"),
        this.elements.expansionTemplate = $("#expansionTemplate"),
        this.elements.buildingTemplate = $("#buildingTemplate"),
        this.elements.resourcesData = $("#resourcesData"),
        this.elements.tipsData = $("#tipsData"),
        this.elements.loadData = $("#loadData"),
        this.elements.csfrToken = $("#csfrToken")
    },
    initTemplates: function() {
        this.templates.tips = this.elements.tipsTemplate.html(),
        Mustache.parse(this.templates.tips),
        this.templates.tip = this.elements.tipTemplate.html(),
        Mustache.parse(this.templates.tip),
        this.templates.build = this.elements.buildTemplate.html(),
        Mustache.parse(this.templates.build),
        this.templates.extra = this.elements.extraTemplate.html(),
        Mustache.parse(this.templates.extra),
        this.templates.expansion = this.elements.expansionTemplate.html(),
        Mustache.parse(this.templates.expansion),
        this.templates.building = this.elements.buildingTemplate.html(),
        Mustache.parse(this.templates.building)
    },
    initData: function() {
        this.data.resources = this.decodeData(this.elements.resourcesData.val()),
        this.data.tips = this.decodeData(this.elements.tipsData.val()),
        this.data.load = this.decodeData(this.elements.loadData.val())
    },
    initOptions: function() {
        const e = this;
        Cookies.get(e.settings.cookies.options) && $.extend(e.options, Cookies.getJSON(e.settings.cookies.options))
    },
    updateOptions: function(e) {
        $.extend(this.options, e),
        Cookies.set(this.settings.cookies.options, this.options, {
            expires: this.settings.cookies.expires,
            path: this.settings.cookies.path
        })
    },
    initEditor: function() {
        const e = this;
        e.elements.plannerEditor.on("mousedown.map", function(t) {
            if (t.preventDefault(),
            "mousedown" === t.type && 1 === t.which || "touchstart" === t.type) {
                const a = e.getEventPageY(t)
                  , n = e.getEventPageX(t)
                  , i = e.elements.map.position().left
                  , s = e.elements.map.position().top;
                e.variables.mapDragging = !1,
                e.elements.window.on("mousemove.map", function(t) {
                    t.preventDefault();
                    const o = e.getEventPageY(t)
                      , l = e.getEventPageX(t);
                    e.variables.mapDragging || (Math.abs(n - l) >= 3 || Math.abs(a - o) >= 3) && (e.variables.mapDragging = !0),
                    e.elements.map.css({
                        top: s + o - a,
                        left: i + l - n
                    })
                }).on("mouseup.map", function(t) {
                    t.preventDefault(),
                    e.elements.window.off("mousemove.map mouseup.map")
                })
            }
        }).on("startbuild", function(t, a, n, i) {
            let s = e.findBuilding(n);
            if (s) {
                e.elements.mapBuildings.find(".builder").remove();
                let t = e.createBuilding(s, i);
                t.addClass("builder").css({
                    top: e.snapToCell(a.pageY - e.elements.map.offset().top - t.height() / 2),
                    left: e.snapToCell(a.pageX - e.elements.map.offset().left - t.width() / 2)
                }).appendTo(e.elements.mapBuildings),
                e.elements.plannerEditor.on("mousemove.builder", function(a) {
                    let n = t.height() / 2
                      , i = t.width() / 2
                      , s = a.pageY - e.elements.map.offset().top
                      , o = a.pageX - e.elements.map.offset().left;
                    t.css({
                        top: e.snapToCell(s) - e.snapToCell(n),
                        left: e.snapToCell(o) - e.snapToCell(i)
                    })
                })
            }
        }).on("stopbuild", function(t) {
            e.elements.mapBuildings.find(".building.builder").remove(),
            e.elements.plannerEditor.off("mousemove.builder")
        }).on("cancelmove", function(t) {
            e.elements.mapBuildings.find(".building.moving").trigger("cancelmove")
        }).on("change", function(t) {
            e.updateReport(),
            e.variables.unsavedChanges = !0
        }),
        e.elements.mapExpansions.on("click", "." + e.settings.classes.expansion, function(t) {
            t.preventDefault(),
            e.variables.mapDragging || e.variables.mode === e.enums.mode.expand && $(this).trigger("toggle")
        }).on("toggle", "." + e.settings.classes.expansion, function(t) {
            const a = $(this);
            e.toggleExpansion(a),
            e.elements.plannerEditor.trigger("change")
        }),
        e.elements.mapBuildings.on("click", "." + e.settings.classes.building, function(t) {
            if (t.preventDefault(),
            e.variables.mapDragging)
                return;
            const a = $(this);
            a.hasClass("builder") ? a.trigger("build") : a.hasClass("moving") ? a.trigger("stopmove") : e.variables.mode === e.enums.mode.move ? a.trigger("startmove") : e.variables.mode === e.enums.mode.sell && a.trigger("sell")
        }).on("build", "." + e.settings.classes.building, function(t) {
            const a = $(this)
              , n = e.detectCollision(a);
            if (a.toggleClass("colliding", n),
            !n) {
                let t = e.getNextId()
                  , n = a.clone().removeClass("builder").appendTo(e.elements.mapBuildings);
                const i = e.getBuildingCoords(n);
                n.data({
                    id: t,
                    x: i.x,
                    y: i.y
                }),
                e.userStartup.city_map.entities.push({
                    id: n.data("id"),
                    cityentity_id: n.data("cityentity-id"),
                    x: n.data("x"),
                    y: n.data("y"),
                    stage: n.data("stage")
                }),
                a.appendTo(a.parent()),
                e.variables.mode !== e.enums.mode.build && e.elements.plannerEditor.trigger("stopbuild"),
                e.elements.plannerEditor.trigger("change")
            }
        }).on("startmove", "." + e.settings.classes.building, function(t) {
            let a = $(this);
            a.addClass("moving").appendTo(a.parent());
            const n = a.width() / 2
              , i = a.height() / 2;
            e.elements.plannerEditor.on("mousemove.moving", function(t) {
                const s = t.pageX - e.elements.map.offset().left
                  , o = t.pageY - e.elements.map.offset().top;
                a.css({
                    left: e.snapToCell(s) - e.snapToCell(n),
                    top: e.snapToCell(o) - e.snapToCell(i)
                })
            })
        }).on("stopmove", "." + e.settings.classes.building, function(t) {
            const a = $(this)
              , n = e.detectCollision(a);
            a.toggleClass("colliding", n),
            n || (a.removeClass("moving"),
            e.updateBuilding(a),
            e.elements.plannerEditor.off("mousemove.moving"),
            e.elements.plannerEditor.trigger("change"))
        }).on("cancelmove", "." + e.settings.classes.building, function(t) {
            const a = $(this);
            a.removeClass("moving colliding"),
            e.options.rotateMap ? a.css({
                left: e.variables.rotatedHeight - a.data("y") * e.options.cellSize - a.outerWidth(),
                top: a.data("x") * e.options.cellSize
            }) : a.css({
                left: a.data("x") * e.options.cellSize,
                top: a.data("y") * e.options.cellSize
            }),
            e.elements.plannerEditor.off("mousemove.moving")
        }).on("sell", "." + e.settings.classes.building, function(t) {
            const a = $(this).addClass("selling")
              , n = e.findBuilding(a.data("cityentity-id"));
            if (n) {
                ("street" === n.type ? e.options.confirmStreets : e.options.confirmBuildings) ? (e.elements.sellModal.find('[data-var="entityname"]').text(n.name),
                e.elements.sellModal.modal({
                    closable: !1,
                    onDeny: function() {
                        a.removeClass("selling")
                    },
                    onApprove: function() {
                        e.removeBuilding(a),
                        e.elements.plannerEditor.trigger("change")
                    }
                }).modal("show")) : (e.removeBuilding(a),
                e.elements.plannerEditor.trigger("change"))
            }
        })
    },
    initMenu: function() {
        const e = this;
        e.elements.plannerMenu.on("modeselect", function(t, a) {
            let n = $(a);
            if (e.elements.plannerEditor.trigger("cancelmove").trigger("stopbuild"),
            e.variables.mode === n.data("mode")) {
                if (n.data("mode") === e.enums.mode.build)
                    return;
                e.variables.mode = e.enums.mode.none,
                $(".active.item", $(this)).removeClass("active").trigger("modeexit")
            } else
                e.variables.mode = n.data("mode"),
                $(".active.item", $(this)).removeClass("active").trigger("modeexit"),
                n.addClass("active").trigger("modeenter")
        }),
        e.elements.window.on("keyup", function(t) {
            "Escape" !== t.key && "Esc" !== t.key && 27 !== t.keyCode || (e.variables.mode = e.enums.mode.none,
            $(".active.item", e.elements.plannerMenu).removeClass("active").trigger("modeexit"),
            e.elements.plannerEditor.trigger("cancelmove").trigger("stopbuild"),
            e.elements.expansionMenu.hide(),
            e.elements.buildingMenu.hide())
        }),
        $('.item[data-cmd="expand"]', e.elements.plannerMenu).data("mode", e.enums.mode.expand).on("modeenter", function() {
            e.elements.map.addClass("mode-expand"),
            e.elements.mapBuildings.fadeOut()
        }).on("modeexit", function() {
            e.elements.map.removeClass("mode-expand"),
            e.elements.mapBuildings.fadeIn()
        }).on("click", function() {
            e.elements.plannerMenu.trigger("modeselect", this)
        }).popup({
            on: "click"
        }),
        $('.item[data-cmd="build"]', e.elements.plannerMenu).data("mode", e.enums.mode.build).on("modeenter", function() {
            e.elements.map.addClass("mode-build")
        }).on("modeexit", function() {
            e.elements.map.removeClass("mode-build")
        }).on("click", function() {
            e.elements.plannerMenu.trigger("modeselect", this),
            e.elements.buildModal.modal("show")
        }),
        $('.item[data-cmd="sell"]', e.elements.plannerMenu).data("mode", e.enums.mode.sell).on("modeenter", function() {
            e.elements.map.addClass("mode-sell")
        }).on("modeexit", function() {
            e.elements.map.removeClass("mode-sell")
        }).on("click", function() {
            e.elements.plannerMenu.trigger("modeselect", this)
        }),
        $('.item[data-cmd="move"]', e.elements.plannerMenu).data("mode", e.enums.mode.move).on("modeenter", function() {
            e.elements.map.addClass("mode-move")
        }).on("modeexit", function() {
            e.elements.map.removeClass("mode-move")
        }).on("click", function() {
            e.elements.plannerMenu.trigger("modeselect", this)
        }),
        $('.item[data-cmd="macros"]', e.elements.plannerMenu).on("click", function() {
            e.elements.macrosModal.modal("show")
        }),
        $('.item[data-cmd="help"]', e.elements.plannerMenu).on("click", function() {
            e.elements.helpModal.modal("show")
        }),
        $('.item[data-cmd="report"]', e.elements.plannerMenu).on("click", function() {
            e.elements.plannerReport.sidebar("toggle")
        }),
        $('.item[data-cmd="settings"]', e.elements.plannerMenu).popup({
            popup: "#plannerSettings",
            position: "top right",
            on: "click"
        }),
        $('.item[data-cmd="save"]', e.elements.plannerMenu).on("click", function() {
            e.elements.saveModal.modal("show")
        })
    },
    initContextMenus: function() {
        const e = this;
        e.elements.expansionMenu.add(e.elements.buildingMenu).on("show", function(t, a) {
            let n = $(this);
            a.pageX + n.width() > e.elements.window.width() ? n.css("left", a.pageX - n.width()) : n.css("left", a.pageX),
            a.pageY + n.height() > e.elements.window.height() ? n.css("top", a.pageY - n.height()) : n.css("top", a.pageY),
            n.show()
        }).on("hide", function(e) {
            $(this).hide()
        }),
        e.elements.mapExpansions.on("contextmenu", "." + e.settings.classes.expansion, function(t) {
            t.preventDefault(),
            e.elements.mapExpansions.find("." + e.settings.classes.expansion + ".selected").removeClass("selected"),
            $(this).addClass("selected").hasClass("unlocked") ? e.elements.expansionMenu.find('.item[data-cmd="toggle"]').html('<i class="lock icon"></i> ' + e.data.resources.lock) : e.elements.expansionMenu.find('.item[data-cmd="toggle"]').html('<i class="unlock icon"></i> ' + e.data.resources.unlock),
            e.elements.expansionMenu.trigger("show", t)
        }),
        e.elements.expansionMenu.find('.item[data-cmd="toggle"]').on("click", function() {
            $("." + e.settings.classes.expansion + ".selected").removeClass("selected").trigger("toggle"),
            e.elements.expansionMenu.trigger("hide")
        }),
        e.elements.mapBuildings.on("contextmenu", "." + e.settings.classes.building, function(t) {
            t.preventDefault();
            let a = $(this);
            if (a.hasClass("builder") || a.hasClass("moving"))
                return;
            e.elements.mapBuildings.find("." + e.settings.classes.building + ".selected").removeClass("selected"),
            a.addClass("selected");
            let n = e.findBuilding(a.data("cityentity-id"));
            if (n) {
                e.elements.buildingMenu.trigger("show", t),
                e.elements.buildingMenu.find("strong").text(n.name);
                let i = e.elements.buildingMenu.find('[data-cmd="change"]').empty()
                  , s = e.findBuildingLevels(n);
                if (s.length > 1) {
                    let t = $('<select class="ui fluid dropdown" data-var="level"></select>').appendTo(i);
                    for (let n = 0; n < s.length; n++) {
                        let i = s[n]
                          , o = $("<option></option>").attr("value", i.id).text(e.getLevelText(i)).appendTo(t);
                        i.id === a.data("cityentity-id") && o.prop("selected", !0)
                    }
                    t.dropdown().find(".menu .item").on("click", function(t) {
                        e.removeBuilding(a);
                        let n = $(this).data("value")
                          , i = $(this).closest('[data-cmd="change"]').find('select[data-var="stage"]').val();
                        e.elements.plannerEditor.trigger("startbuild", [t, n, i]),
                        e.elements.buildingMenu.trigger("hide")
                    }),
                    i.show()
                } else
                    i.hide();
                let o = e.findBuildingStages(n);
                if (o.length > 0) {
                    let t = $('<select class="ui fluid dropdown" data-var="stage"></select>').appendTo(i);
                    for (let n = 0; n < o.length; n++) {
                        let i = o[n]
                          , s = $("<option></option>").attr("value", i).text(e.getStageText(i)).appendTo(t);
                        Number(i) === a.data("stage") && s.prop("selected", !0)
                    }
                    t.dropdown().find(".menu .item").on("click", function(t) {
                        e.removeBuilding(a);
                        let n = $(this).closest('[data-cmd="change"]').find('select[data-var="level"]').val()
                          , i = $(this).data("value");
                        e.elements.plannerEditor.trigger("startbuild", [t, n, i]),
                        e.elements.buildingMenu.trigger("hide")
                    })
                }
                e.elements.buildingMenu.trigger("show", t)
            }
        }),
        e.elements.buildingMenu.find('.item[data-cmd="copy"]').on("click", function(t) {
            let a = e.elements.mapBuildings.find("." + e.settings.classes.building + ".selected");
            e.elements.plannerEditor.trigger("startbuild", [t, a.data("cityentity-id"), a.data("stage")]),
            e.elements.buildingMenu.trigger("hide")
        }),
        e.elements.buildingMenu.find('.item[data-cmd="move"]').on("click", function(t) {
            e.elements.mapBuildings.find("." + e.settings.classes.building + ".selected").trigger("startmove"),
            e.elements.buildingMenu.trigger("hide")
        }),
        e.elements.buildingMenu.find('.item[data-cmd="sell"]').on("click", function(t) {
            e.elements.mapBuildings.find("." + e.settings.classes.building + ".selected").trigger("sell"),
            e.elements.buildingMenu.trigger("hide")
        }),
        $(document).on("mousedown", function(t) {
            0 === $(t.target).parents("#expansionMenu").length && e.elements.expansionMenu.trigger("hide"),
            0 === $(t.target).parents("#buildingMenu").length && e.elements.buildingMenu.trigger("hide")
        })
    },
    initSettings: function() {
        const e = this;
        $('[data-cmd="zoomout"]', e.elements.plannerSettings).on("click", function() {
            e.updateOptions({
                cellSize: Math.max(e.options.cellSize - e.settings.sizes.cell.step, e.settings.sizes.cell.min)
            }),
            e.elements.map.removeClass(function(e, t) {
                return (t.match(/(^|\s)zoom-\d+/g) || []).join(" ")
            }),
            e.elements.map.addClass("zoom-" + e.options.cellSize),
            e.drawMapExpansions(),
            e.drawMapBuildings()
        }),
        $('[data-cmd="zoomreset"]', e.elements.plannerSettings).on("click", function() {
            e.updateOptions({
                cellSize: e.settings.sizes.cell.default
            }),
            e.elements.map.removeClass(function(e, t) {
                return (t.match(/(^|\s)zoom-\d+/g) || []).join(" ")
            }),
            e.elements.map.addClass("zoom-" + e.options.cellSize),
            e.drawMapExpansions(),
            e.drawMapBuildings()
        }),
        $('[data-cmd="zoomin"]', e.elements.plannerSettings).on("click", function() {
            e.updateOptions({
                cellSize: Math.min(e.options.cellSize + e.settings.sizes.cell.step, e.settings.sizes.cell.max)
            }),
            e.elements.map.removeClass(function(e, t) {
                return (t.match(/(^|\s)zoom-\d+/g) || []).join(" ")
            }),
            e.elements.map.addClass("zoom-" + e.options.cellSize),
            e.drawMapExpansions(),
            e.drawMapBuildings()
        }),
        $('[data-cmd="positionreset"]', e.elements.plannerSettings).on("click", function() {
            e.elements.map.css({
                left: 0,
                top: 0
            }),
            e.drawMapExpansions(),
            e.drawMapBuildings()
        }),
        $('[data-cmd="positionrotate"]', e.elements.plannerSettings).on("click", function() {
            e.updateOptions({
                rotateMap: !e.options.rotateMap
            }),
            e.drawMapExpansions(),
            e.drawMapBuildings()
        }),
        $('[data-cmd="highlight"]', e.elements.plannerSettings).dropdown({
            onChange: function(t) {
                e.updateOptions({
                    highlight: t
                }),
                e.elements.map.removeClass(function(e, t) {
                    return (t.match(/(^|\s)highlight-\w+/g) || []).join(" ")
                }),
                t && e.elements.map.addClass("highlight-" + t)
            }
        }).dropdown("set selected", e.options.highlight),
        $('[data-cmd="showLevels"]', e.elements.plannerSettings).prop("checked", e.options.showLevels).on("change", function() {
            let t = $(this).prop("checked");
            e.updateOptions({
                showLevels: t
            }),
            e.elements.map.toggleClass("show-levels", t)
        }),
        $('[data-cmd="showTiers"]', e.elements.plannerSettings).prop("checked", e.options.showTiers).on("change", function() {
            let t = $(this).prop("checked");
            e.updateOptions({
                showTiers: t
            }),
            e.elements.map.toggleClass("show-tiers", t)
        }),
        $('[data-cmd="confirmBuildings"]', e.elements.plannerSettings).prop("checked", e.options.confirmBuildings).on("change", function() {
            e.updateOptions({
                confirmBuildings: $(this).prop("checked")
            })
        }),
        $('[data-cmd="confirmStreets"]', e.elements.plannerSettings).prop("checked", e.options.confirmStreets).on("change", function() {
            e.updateOptions({
                confirmStreets: $(this).prop("checked")
            })
        }),
        $('[data-cmd="reportIgnoreOutside"]', e.elements.plannerSettings).prop("checked", e.options.reportIgnoreOutside).on("change", function() {
            e.updateOptions({
                reportIgnoreOutside: $(this).prop("checked")
            }),
            e.updateReport()
        })
    },
    initReport: function() {
        const e = this;
        e.elements.plannerReport.sidebar({
            context: e.elements.planner,
            dimPage: !1,
            closable: !1,
            transition: "overlay",
            onShow: function() {
                e.updateReport()
            }
        }),
        $(".ui.accordion", e.elements.plannerReport).accordion({
            exclusive: !1
        }),
        $('.item[data-cmd="setvariablebydropdown"]', e.elements.plannerReport).each(function() {
            let t = $(this)
              , a = t.find(".ui.dropdown");
            a.dropdown({
                onChange: function(a) {
                    e.userStartup.ea_data[t.data("arg")] = Number(a),
                    e.updateReport()
                }
            }),
            t.on("click", function(e) {
                0 === $(e.target).closest(".ui.dropdown").length && a.dropdown("toggle")
            })
        }),
        $('.item[data-cmd="setvariablebyinput"]', e.elements.plannerReport).each(function() {
            let t = $(this)
              , a = $('<div class="ui inverted dropdown"></div>').append('<div class="text">0</div>').append('<div class="menu"><div class="ui message" style="box-shadow:none; width:150px;"><div class="ui search fluid action input"><input type="text" placeholder="0" /><button class="ui icon button"><i class="check icon"></i></button></div></div></div>').dropdown({
                onShow: function() {
                    $(this).find(".ui.input input").val("").trigger("input")
                }
            });
            t.find(".description").empty().append(a),
            t.on("click", function(e) {
                0 === $(e.target).closest(".ui.dropdown").length && a.dropdown("toggle")
            }),
            a.find(".ui.input input").on("keyup", function(e) {
                let t = $(this)
                  , a = t.siblings("button")
                  , n = t.val().match(/^[0-9]*$/);
                a.prop("disabled", !n),
                n && 13 === e.keyCode && a.trigger("click")
            }).trigger("input"),
            a.find(".ui.input button").on("click", function() {
                let n = $(this).siblings("input");
                e.userStartup.ea_data[t.data("arg")] = Number(n.val()),
                a.dropdown("set text", e.userStartup.ea_data[t.data("arg")].toLocaleString(e.variables.locale)).dropdown("hide"),
                e.updateReport()
            })
        }),
        $('.item[data-cmd="openrelicsmodal"]', e.elements.plannerReport).on("click", function() {
            e.elements.relicsModal.modal("show")
        })
    },
    initMap: function() {
        this.elements.map.addClass("zoom-" + this.options.cellSize),
        this.elements.map.toggleClass("show-levels", this.options.showLevels),
        this.elements.map.toggleClass("show-tiers", this.options.showTiers)
    },
    initRaceModal: function() {
        const e = this;
        e.elements.raceModal.modal({
            autofocus: !1,
            closable: !1
        }),
        e.elements.raceModal.find(".ui.button[data-description]").on("mouseover", function() {
            const e = $(this);
            e.closest(".content").find('[data-var="description"]').html(e.data("description"))
        }).on("mouseout", function() {
            $(this).closest(".content").find('[data-var="description"]').html("&nbsp;")
        }),
        e.elements.raceModal.find("[data-race]").on("click", function() {
            e.userStartup.user_data.race = $(this).data("race"),
            e.elements.loadingModal.modal("show")
        }),
        e.elements.raceModal.find('a[data-cmd="browser"]').toggleClass("disabled", !(site.storageAvailable("localStorage") && localStorage[e.settings.localStorage.keys.data])).on("click", function() {
            e.assignUserStartup(e.decodeData(localStorage[e.settings.localStorage.keys.data])),
            e.elements.loadingModal.modal("show")
        }),
        e.data.tips && e.elements.raceModal.find('[data-var="tip"]').html(Mustache.render(e.templates.tip, {
            description: e.data.tips[Math.floor(Math.random() * e.data.tips.length)].description
        }))
    },
    initLoadingModal: function() {
        const e = this;
        e.elements.loadingModal.modal({
            closable: !1,
            onVisible: function() {
                $.ajax({
                    url: e.settings.ajaxUrls.gameStartupGet.replace("{0}", e.variables.locale),
                    method: "get",
                    crossDomain: true,
                    data: {
                        v: e.variables.gameVersion
                    },
                    xhrFields: {cors: false}
                }).done(function(t) {
                    e.game = t,
                    e.draw(),
                    e.elements.loadingModal.modal("hide")
                }).fail(function() {
                    e.elements.loadingFailedModal.modal("show")
                })
            }
        }),
        e.elements.loadingModal.find(".ui.button[data-description]").on("mouseover", function() {
            const e = $(this);
            e.closest(".content").find('[data-var="description"]').html(e.data("description"))
        }).on("mouseout", function() {
            $(this).closest(".content").find('[data-var="description"]').html("&nbsp;")
        }),
        e.data.tips && e.elements.loadingModal.find('[data-var="tip"]').html(Mustache.render(e.templates.tip, {
            description: e.data.tips[Math.floor(Math.random() * e.data.tips.length)].description
        }))
    },
    initLoadingFailedModal: function() {
        this.elements.loadingFailedModal.modal({
            closable: !1
        })
    },
    initLoadingNotFoundModal: function() {
        this.elements.loadingNotFoundModal.modal({
            closable: !1
        })
    },
    initUnsavedModal: function() {
        const e = this;
        $(".ui.top.fixed.menu a").on("click", function(t) {
            let a = $(this);
            e.variables.unsavedChanges && (t.preventDefault(),
            e.elements.unsavedModal.modal({
                onApprove: function() {
                    location.href = a.attr("href")
                }
            }).modal("show"))
        })
    },
    initBuildModal: function() {
        const e = this;
        let t, a = $(".ui.tabular.menu", e.elements.buildModal), n = $(".ui.pagination.menu", e.elements.buildModal), i = $(".ui.input", e.elements.buildModal), s = i.find("i"), o = i.find("input");
        e.elements.buildModal.modal({
            autofocus: !1
        }),
        e.elements.buildModal.on("tabchange", function(t) {
            let a = e.elements.buildModal.find(".ui.active.tab .ui.grid .column").length
              , i = Math.max(Math.ceil(a / 6), 1);
            n.data("pagecount", i),
            o.val(""),
            e.elements.buildModal.trigger("pagechange", "firstpage")
        }).on("searchchange", function(t, a) {
            let i = e.elements.buildModal.find(".ui.active.tab .ui.grid .column").filter(function() {
                return $(this).data("search").toLowerCase().indexOf(a.toLowerCase()) > -1
            }).length
              , s = Math.max(Math.ceil(i / 6), 1);
            n.data("pagecount", s),
            e.elements.buildModal.trigger("pagechange", "firstpage")
        }).on("pagechange", function(e, t) {
            let a = $(this)
              , i = n.data("page")
              , s = n.data("pagecount")
              , l = void 0;
            switch (t) {
            case "firstpage":
                l = 1;
                break;
            case "previouspage":
                l = Math.max(i - 1, 1);
                break;
            case "nextpage":
                l = Math.min(i + 1, s);
                break;
            case "lastpage":
                l = s;
                break;
            default:
                l = 1
            }
            n.data("page", l),
            n.find('[data-cmd="currentpage"]').text(l + " / " + s),
            n.find('[data-cmd="firstpage"], [data-cmd="previouspage"]').toggleClass("disabled", 1 === l),
            n.find('[data-cmd="nextpage"], [data-cmd="lastpage"]').toggleClass("disabled", l === s);
            let r = 6 * (l - 1)
              , d = r + 6;
            a.find(".ui.active.tab .ui.grid .column").hide().filter(function() {
                return $(this).data("search").toLowerCase().indexOf(o.val().toLowerCase()) > -1
            }).slice(r, d).show()
        }).on("click", ".ui.approve.button", function(t) {
            let a = $(this).closest(".ui.form")
              , n = a.find('.ui.dropdown[data-var="level"]').dropdown("get value")
              , i = a.find('.ui.dropdown[data-var="stage"]').dropdown("get value");
            e.elements.plannerEditor.trigger("startbuild", [t, n, i]),
            e.elements.buildModal.modal("hide")
        }),
        $(".item", a).tab({
            context: e.elements.buildModal,
            onVisible: function(t) {
                e.elements.buildModal.trigger("tabchange")
            }
        }),
        $(".item", n).on("click", function(t) {
            t.preventDefault();
            let a = $(this);
            a.hasClass("disabled") || a.hasClass("active") || e.elements.buildModal.trigger("pagechange", a.data("cmd"))
        }),
        o.on("keyup", function() {
            i.addClass("loading"),
            clearTimeout(t),
            t = setTimeout(function() {
                i.removeClass("loading"),
                s.toggleClass("remove", "" !== o.val()).toggleClass("search", "" === o.val()),
                e.elements.buildModal.trigger("searchchange", o.val())
            }, 300)
        }),
        s.on("click", function() {
            s.hasClass("remove") && (s.removeClass("remove").addClass("search"),
            o.val(""),
            e.elements.buildModal.trigger("searchchange", o.val()))
        })
    },
    initSellModal: function() {
        this.elements.sellModal.modal({
            closable: !1
        })
    },
    initMacrosModal: function() {
        const e = this;
        let t = e.elements.macrosModal.find("table");
        e.elements.macrosModal.modal({
            autofocus: !1,
            onShow: function() {
                t.trigger("refresh")
            }
        }),
        t.on("refresh", function() {
            let a = e.getOccupiedTiles()
              , n = 0;
            for (let e = 0; e < a.length; e++)
                for (let t = 0; t < a[e].length; t++)
                    0 === a[e][t] && n++;
            let i = 0;
            for (let t = 0; t < e.userStartup.city_map.entities.length; t++) {
                let a = e.userStartup.city_map.entities[t]
                  , n = e.findBuilding(a.cityentity_id);
                n && "street" === n.type && n.race === e.userStartup.user_data.race && (i += n.width * n.length)
            }
            t.find('tr[data-row="sell"] td[data-cell="tiles"], tr[data-row="upgrade"] td[data-cell="tiles"]').text(i),
            t.find('tr[data-row="fill"] td[data-cell="tiles"]').text(n),
            t.find('tr[data-row="sell"] button, tr[data-row="upgrade"] button').prop("disabled", 0 === i),
            t.find('tr[data-row="fill"] button').prop("disabled", 0 === n)
        }),
        t.find("button").on("ui-loading", function() {
            $(this).removeClass("green").addClass("loading")
        }).on("ui-finished", function() {
            let e = $(this);
            e.removeClass("loading primary").addClass("green").find("i").removeClass("play").addClass("check"),
            setTimeout(function() {
                e.removeClass("green").addClass("primary").find("i").removeClass("check").addClass("play")
            }, 2e3)
        }),
        t.find('tr[data-row="sell"] button').on("click", function() {
            let a = $(this).trigger("ui-loading")
              , n = [];
            for (let t = 0; t < e.game.buildings.length; t++) {
                let a = e.game.buildings[t];
                "street" === a.type && a.race === e.userStartup.user_data.race && n.push(a.id)
            }
            e.userStartup.city_map.entities = e.userStartup.city_map.entities.filter(function(e) {
                return n.indexOf(e.cityentity_id) < 0
            }),
            e.drawMapBuildings(),
            e.elements.plannerEditor.trigger("change"),
            t.trigger("refresh"),
            a.trigger("ui-finished")
        }),
        t.find('tr[data-row="upgrade"] button').on("click", function() {
            let a = $(this).trigger("ui-loading")
              , n = $(this).closest("tr").find(".ui.dropdown").dropdown("get value");
            if (n) {
                let a = [];
                for (let t = 0; t < e.game.buildings.length; t++) {
                    let i = e.game.buildings[t];
                    "street" === i.type && i.race === e.userStartup.user_data.race && i.id !== n && a.push(i.id)
                }
                for (let t = 0; t < e.userStartup.city_map.entities.length; t++) {
                    let i = e.userStartup.city_map.entities[t];
                    a.indexOf(i.cityentity_id) > -1 && (i.cityentity_id = n)
                }
                e.drawMapBuildings(),
                e.elements.plannerEditor.trigger("change"),
                t.trigger("refresh")
            }
            a.trigger("ui-finished")
        }),
        t.find('tr[data-row="fill"] button').on("click", function() {
            let a = $(this).trigger("ui-loading")
              , n = $(this).closest("tr").find(".ui.dropdown").dropdown("get value");
            if (n) {
                let a = e.getNextId()
                  , i = e.getOccupiedTiles();
                for (let t = 0; t < i.length; t++)
                    for (let s = 0; s < i[t].length; s++)
                        0 === i[t][s] && e.userStartup.city_map.entities.push({
                            id: a++,
                            cityentity_id: n,
                            x: t,
                            y: s
                        });
                e.drawMapBuildings(),
                e.elements.plannerEditor.trigger("change"),
                t.trigger("refresh")
            }
            a.trigger("ui-finished")
        })
    },
    initHelpModal: function() {
        const e = this;
        if (e.elements.helpModal.modal({
            autofocus: !1
        }),
        e.data.tips && e.templates.tip) {
            let t = {
                tips: []
            };
            for (let a = 0; a < e.data.tips.length; a++) {
                let n = e.data.tips[a];
                t.tips.push({
                    index: a,
                    active: 0 === a,
                    image: n.image,
                    title: n.title,
                    description: n.description
                })
            }
            let a = e.elements.helpModal.find('[data-var="tips"]').html(Mustache.render(e.templates.tips, t));
            a.on("click", "nav a", function() {
                let e = $(this);
                e.addClass("active").find("i").removeClass("outline"),
                e.siblings().removeClass("active").find("i").addClass("outline"),
                a.find(".tips-slide").hide().filter('[data-index="' + e.data("index") + '"]').show()
            })
        }
    },
    initSaveModal: function() {
        const e = this;
        e.elements.saveModal.modal({
            onShow: function() {
                $('.ui.tab[data-tab="file"] textarea', e.elements.saveModal).val(e.encodeData(e.userStartup))
            },
            onHidden: function() {
                $(".ui.tab .ui.message", e.elements.saveModal).hide()
            }
        }),
        e.elements.saveModal.find(".ui.tabular.menu .item").tab({
            context: e.elements.saveModal
        }),
        $('.ui.tab[data-tab="browser"] .ui.form', e.elements.saveModal).each(function() {
            let t = $(this)
              , a = t.find('[data-var="storagesupport"]')
              , n = t.find('[data-var="storagelastmodified"]')
              , i = t.find('[data-cmd="save"]')
              , s = t.find('[data-cmd="load"]');
            var o = t.find(".ui.message");
            site.storageAvailable("localStorage") ? (a.addClass("text-green").html('<i class="check icon"></i> Your browser supports this feature.'),
            localStorage[e.settings.localStorage.keys.data] ? n.html('<i class="calendar alternate outline icon"></i> <b>' + moment(new Date(localStorage[e.settings.localStorage.keys.lastModified])).format("dddd DD MMM YYYY HH:mm:ss") + "</b>") : (n.html('<i class="calendar alternate outline icon text-grey"></i> <span class="text-grey">No save found<span>'),
            s.prop("disabled", !0))) : (a.addClass("text-red").html('<i class="remove icon"></i> Your browser does not support this feature.'),
            n.hide(),
            i.hide(),
            s.hide()),
            i.on("click", function() {
                o.removeClass("success error").empty().hide();
                try {
                    let t = new Date;
                    localStorage[e.settings.localStorage.keys.data] = e.encodeData(e.userStartup),
                    localStorage[e.settings.localStorage.keys.lastModified] = t.toString(),
                    n.html('<i class="calendar alternate outline icon"></i> <b>' + moment(new Date(localStorage[e.settings.localStorage.keys.lastModified])).format("dddd DD MMM YYYY HH:mm:ss") + "</b>"),
                    s.prop("disabled", !1),
                    e.variables.unsavedChanges = !1,
                    e.isGaLoaded() && ga("send", "event", "City Planner", "Save - Browser"),
                    o.addClass("success").text("City saved successfully").show()
                } catch (e) {
                    o.addClass("error").text("Unabled to save city").show()
                }
            }),
            s.on("click", function() {
                try {
                    o.removeClass("success error").empty().hide(),
                    localStorage[e.settings.localStorage.keys.data] && (e.assignUserStartup(e.decodeData(localStorage[e.settings.localStorage.keys.data])),
                    e.draw(),
                    e.updateReport(),
                    e.isGaLoaded() && ga("send", "event", "City Planner", "Load - Browser", null, {
                        nonInteraction: !0
                    }),
                    o.addClass("success").text("City loaded successfully").show())
                } catch (e) {
                    o.addClass("error").text("Unabled to load city").show()
                }
            })
        }),
        $('.ui.tab[data-tab="link"] .ui.form', e.elements.saveModal).each(function() {
            var t = $(this)
              , a = t.find('button[data-cmd="create"]')
              , n = t.find('button[data-cmd="copy"]')
              , i = t.find('input[type="text"]')
              , s = t.find(".ui.message");
            a.on("click", function(t) {
                a.addClass("loading").prop("disabled", !0),
                n.prop("disabled", !0),
                i.val("").prop("disabled", !0),
                s.removeClass("error success").hide(),
                $.ajax({
                    url: e.settings.ajaxUrls.userStartupPost,
                    method: "post",
                    contentType: "application/json",
                    data: JSON.stringify(e.userStartup),
                    headers: {
                        "X-Cfsr-Token": e.elements.csfrToken.val()
                    }
                }).done(function(t) {
                    n.prop("disabled", !1),
                    i.val(t.url).prop("disabled", !1),
                    s.addClass("success").text("Link created successfully").show(),
                    e.variables.unsavedChanges = !1,
                    e.isGaLoaded() && ga("send", "event", "City Planner", "Save - Link")
                }).fail(function() {
                    s.addClass("error").text("Unable to create link").show()
                }).always(function() {
                    a.removeClass("loading").prop("disabled", !1)
                })
            }),
            i.on("click", function() {
                i.select()
            }),
            n.on("click", function() {
                try {
                    i.select(),
                    document.execCommand("copy")
                } catch (e) {}
            })
        }),
        $('.ui.tab[data-tab="file"] .ui.form', e.elements.saveModal).each(function() {
            let t = $(this)
              , a = t.find("textarea");
            var n = t.find('button[data-cmd="copy"]')
              , i = t.find('button[data-cmd="download"]')
              , s = t.find('button[data-cmd="load"]')
              , o = t.find(".ui.message");
            a.on("click", function() {
                $(this).select(),
                e.variables.unsavedChanges = !1
            }),
            n.on("click", function() {
                try {
                    o.removeClass("success error").empty().hide(),
                    a.select(),
                    document.execCommand("copy") ? (e.variables.unsavedChanges = !1,
                    o.addClass("success").text("Copying to clipboard was successful").show()) : o.addClass("error").text("Unable to copy to clipboard").show(),
                    e.isGaLoaded() && ga("send", "event", "City Planner", "Save - File")
                } catch (e) {
                    o.addClass("error").text("Unable to copy to clipboard").show()
                }
            }),
            i.on("click", function() {
                try {
                    o.removeClass("success error").empty().hide();
                    let t = document.createElement("a");
                    t.href = "data:text/plain," + a.val(),
                    t.setAttribute("download", "city-planner-" + moment(new Date).format("YYYYMMDD-HHmmss") + ".txt"),
                    document.body.appendChild(t),
                    t.click(),
                    document.body.removeChild(t),
                    e.variables.unsavedChanges = !1,
                    o.addClass("success").text("Downloading file was successful").show(),
                    e.isGaLoaded() && ga("send", "event", "City Planner", "Save - File")
                } catch (e) {
                    o.addClass("error").text("Unable to download file").show()
                }
            }),
            s.on("click", function(t) {
                o.removeClass("success error").empty().hide();
                try {
                    let t = e.decodeData(a.val());
                    e.assignUserStartup(t),
                    e.draw(),
                    e.updateReport(),
                    o.addClass("success").text("Loading city was successful").show(),
                    e.isGaLoaded() && ga("send", "event", "City Planner", "Load - File", null, {
                        nonInteraction: !0
                    })
                } catch (e) {
                    o.addClass("error").text("Unable to load city").show()
                }
            })
        })
    },
    initRelicsModal: function() {
        const e = this;
        let t = $('table[data-type="count"]', e.elements.relicsModal)
          , a = $('table[data-type="boost"]', e.elements.relicsModal);
        e.elements.relicsModal.modal({
            autofocus: !1,
            onShow: function() {
                a.trigger("refresh")
            },
            onHide: function() {
                e.updateReport()
            }
        }),
        t.on("refresh", function() {
            $(this).find('tr[data-type="relic"] td[data-resource]').each(function() {
                let t = $(this)
                  , a = !1;
                for (let n = 0; n < e.userStartup.ea_data.relicBoosts.length; n++) {
                    let i = e.userStartup.ea_data.relicBoosts[n];
                    if ("relic_" + i.good_id === t.data("resource"))
                        switch (i.good_type) {
                        case "sentient":
                        case "common":
                            t.attr("class", "boost-" + i.good_type),
                            a = !0
                        }
                }
                a || t.attr("class", "boost-none")
            })
        }).find("input").on("change", function() {
            let t = $(this)
              , n = t.closest("td")
              , i = t.val()
              , s = n.data("resource");
            if (isNaN(i)) {
                for (let t = 0; t < e.userStartup.ea_data.relicCounts.length; t++)
                    if (e.userStartup.ea_data.relicCounts[t].relic_id === s) {
                        e.userStartup.ea_data.relicCounts.splice(t, 1);
                        break
                    }
            } else {
                let t = !1;
                for (let a = 0; a < e.userStartup.ea_data.relicCounts.length; a++)
                    if (e.userStartup.ea_data.relicCounts[a].relic_id === s) {
                        e.userStartup.ea_data.relicCounts[a].amount !== Number(i) && (e.userStartup.ea_data.relicCounts[a].amount = Number(i)),
                        t = !0;
                        break
                    }
                t || e.userStartup.ea_data.relicCounts.push({
                    relic_id: s,
                    amount: Number(i)
                })
            }
            a.trigger("refresh")
        }),
        a.on("refresh", function() {
            let t = $(this)
              , a = t.find(".ui.dropdown")
              , n = a.dropdown("get value")
              , i = t.data("good-type");
            n ? (t.find('[data-var="boost"]').html((100 * e.calculateRelicBoost(n, i)).toLocaleString(e.variables.locale) + "%"),
            a.closest("td").attr("class", "boost-" + t.data("good-type"))) : (t.find('[data-var="boost"]').html('<span class="text-muted">0%</span>'),
            a.closest("td").attr("class", "boost-none"))
        }).find(".ui.dropdown").dropdown({
            onChange: function(a, n, i) {
                let s = i.closest("table");
                if (a) {
                    let t = !1;
                    for (let n = 0; n < e.userStartup.ea_data.relicBoosts.length; n++)
                        if (e.userStartup.ea_data.relicBoosts[n].good_type === s.data("good-type") && e.userStartup.ea_data.relicBoosts[n].quality === Number(s.data("quality"))) {
                            e.userStartup.ea_data.relicBoosts[n].good_id !== a && (e.userStartup.ea_data.relicBoosts[n].good_id = a),
                            t = !0;
                            break
                        }
                    t || e.userStartup.ea_data.relicBoosts.push({
                        good_id: a,
                        good_type: s.data("good-type"),
                        quality: s.data("quality")
                    })
                } else
                    for (let t = 0; t < e.userStartup.ea_data.relicBoosts.length; t++)
                        if (e.userStartup.ea_data.relicBoosts[t].good_type === s.data("good-type") && e.userStartup.ea_data.relicBoosts[t].quality === Number(s.data("quality"))) {
                            e.userStartup.ea_data.relicBoosts.splice(t, 1),
                            foundRelicBoost = !0;
                            break
                        }
                s.trigger("refresh"),
                t.trigger("refresh")
            }
        })
    },
    initProvisionModal: function() {
        const e = this;
        let t = $('[data-cmd="openprovisionmodal"]', e.elements.plannerReport)
          , a = $('[data-var="resourcename"]', e.elements.provisionModal)
          , n = $("table[data-table]", e.elements.provisionModal)
          , i = n.filter('table[data-table="provided"]')
          , s = n.filter('table[data-table="required"]');
        t.on("click", function() {
            let t = $(this);
            e.elements.provisionModal.data("resource", t.data("resource")).modal("show")
        }),
        e.addReportSort(n),
        e.elements.provisionModal.modal({
            onHidden: function() {
                a.empty(),
                n.find("tbody").empty(),
                e.clearReportSort(n)
            },
            onShow: function() {
                let t = e.elements.provisionModal.data("resource");
                for (let n = 0; n < e.game.startup.goodsList.length; n++) {
                    let i = e.game.startup.goodsList[n];
                    if (i.id === t) {
                        a.text(i.name);
                        break
                    }
                }
                let n = {
                    required: 0,
                    wonderLevels: 0,
                    residencePopulation: 0,
                    squadSize: e.userStartup.ea_data.battleSquadsize,
                    mainRankingPoints: 0
                };
                for (let a = 0; a < e.userStartup.city_map.entities.length; a++) {
                    let i = e.userStartup.city_map.entities[a];
                    if (e.isIgnored(i))
                        continue;
                    let s = e.findBuilding(i.cityentity_id);
                    if (s) {
                        let a = e.getRequirement(s, t);
                        switch (a && (n.required += a),
                        s.type) {
                        case "ancient_wonder":
                            n.wonderLevels += s.level;
                            break;
                        case "residential":
                        case "premium_residential":
                            n.residencePopulation += e.getProvision(s, "population");
                            break;
                        case "main_building":
                            n.mainRankingPoints = s.rankingPoints
                        }
                    }
                }
                let o = 0
                  , l = 0
                  , r = e.getBuildingCounts();
                for (let a in r) {
                    let d = a.split("#")
                      , c = d[0]
                      , u = d[1]
                      , p = e.findBuilding(c);
                    if (p) {
                        let d = 0
                          , c = e.getProvision(p, t);
                        if (c && (d = e.isEvolvingBuilding(p) ? e.calculateProvision(p, u, t, c) : c),
                        "population" === t)
                            switch (p.base_name) {
                            case "B_All_AW2":
                            case "B_Dwarfs_AW2":
                                d = Math.ceil(e.getEffectValue("available_population_bonus", p) * n.required);
                                break;
                            case "B_Gr10_AW2":
                                d = Math.ceil((e.getEffectValue("residential_population_boost", p) - 1) * n.residencePopulation)
                            }
                        else if ("culture" === t)
                            switch (p.base_name) {
                            case "B_Humans_AW1":
                            case "B_Elves_AW1":
                            case "B_All_AW5":
                            case "B_Gr10_AW2":
                                d = Math.ceil(e.getEffectValue("available_culture_bonus", p) * n.squadSize);
                                break;
                            case "B_All_AW6":
                                d = Math.ceil(e.getEffectValue("culture_by_ranking_points", p) * n.wonderLevels * n.mainRankingPoints)
                            }
                        if (d) {
                            let t = d * r[a];
                            o += t,
                            $("<tr></tr>").attr({
                                "data-base-name": p.base_name,
                                "data-cityentity-id": p.id
                            }).data({
                                "sort-quantity": r[a],
                                "sort-name": p.name,
                                "sort-unit": d,
                                "sort-tile": d / p.width / p.length,
                                "sort-total": t
                            }).append(e.createReportQuantityCell(r[a])).append(e.createReportBuildingCell(p, u)).append(e.createReportUnitCell(d, p)).append(e.createReportSubtotalCell(t)).appendTo(i.find("tbody"))
                        }
                        let m = e.getRequirement(p, t);
                        if (m) {
                            let t = m * r[a];
                            l += t,
                            $("<tr></tr>").attr({
                                "data-base-name": p.base_name,
                                "data-cityentity-id": p.id
                            }).data({
                                "sort-quantity": r[a],
                                "sort-name": p.name,
                                "sort-unit": m,
                                "sort-tile": m / p.width / p.length,
                                "sort-total": t
                            }).append(e.createReportQuantityCell(r[a])).append(e.createReportBuildingCell(p, u)).append(e.createReportUnitCell(m, p)).append(e.createReportSubtotalCell(t)).appendTo(s.find("tbody"))
                        }
                    }
                }
                i.find('tfoot [data-cell="total"]').html("<strong>" + o.toLocaleString(e.variables.locale) + "</strong>"),
                s.find('tfoot [data-cell="total"]').html("<strong>" + l.toLocaleString(e.variables.locale) + "</strong>"),
                e.elements.provisionModal.modal("refresh")
            }
        })
    },
    initProductionModal: function() {
        const e = this;
        let t = $('[data-cmd="openproductionmodal"]', e.elements.plannerReport)
          , a = $('[data-var="resourcename"]', e.elements.productionModal)
          , n = $("table[data-table]", e.elements.productionModal)
          , i = n.filter('[data-table="produced"]')
          , s = n.filter('[data-table="consumed"]');
        t.on("click", function() {
            let t = $(this);
            e.elements.productionModal.data("resource", t.data("resource")).modal("show")
        }),
        n.on("refresh-footer", function() {
            let t = $(this)
              , a = 0;
            t.find('tbody tr td[data-cell="subtotal"]').each(function() {
                let e = Number($(this).data("value"));
                isNaN(e) || (a += e)
            }),
            t.find('tfoot tr th[data-cell="total"]').html("<strong>" + a.toLocaleString(e.variables.locale) + "</strong>")
        }).on("refresh-row", "tr", function() {
            let t = $(this)
              , a = t.find('td[data-cell="quantity"]')
              , n = t.find('td[data-cell="collection"]')
              , i = t.find('td[data-cell="subtotal"]')
              , s = Number(n.data("amount"))
              , o = Number(n.data("time"))
              , l = Number(a.data("value"))
              , r = e.calculateDailyAmount(s, o) * l;
            isNaN(r) ? (i.data("value", 0).text(0),
            t.data("sort-total", 0)) : (i.data("value", r).text(r.toLocaleString(e.variables.locale)),
            t.data("sort-total", r))
        }),
        e.addReportSort(n),
        e.elements.productionModal.modal({
            autofocus: !1,
            onHide: function() {
                e.updateReport()
            },
            onHidden: function() {
                e.elements.productionModal.find('[data-var="resourcename"]').empty(),
                n.find("tbody").empty(),
                e.clearReportSort(n)
            },
            onShow: function() {
                let t = e.elements.productionModal.data("resource");
                for (let n = 0; n < e.game.startup.goodsList.length; n++) {
                    let i = e.game.startup.goodsList[n];
                    if (i.id === t) {
                        a.text(i.name);
                        break
                    }
                }
                let n = {
                    moneyCap: 0,
                    suppliesCap: 0,
                    mainLevels: 0,
                    completedProvinces: e.userStartup.ea_data.completedProvinces
                };
                for (let t = 0; t < e.userStartup.city_map.entities.length; t++) {
                    let a = e.userStartup.city_map.entities[t];
                    if (e.isIgnored(a))
                        continue;
                    let i = e.findBuilding(a.cityentity_id);
                    i && "main_building" === i.type && (n.moneyCap = e.getCapacity(i, "money"),
                    n.suppliesCap = e.getCapacity(i, "supplies"),
                    n.mainLevels = i.level)
                }
                let o = e.getBuildingCounts();
                for (let a in o) {
                    let l = a.split("#")
                      , r = l[0]
                      , d = (l[1],
                    e.findBuilding(r));
                    if (d && d.production && d.production.products) {
                        if (d.production.products.some(function(e) {
                            return e.revenue.resources[t] >= 0
                        })) {
                            let s = $("<tr></tr>").attr({
                                "data-base-name": d.base_name,
                                "data-cityentity-id": d.id
                            }).data({
                                "sort-quantity": o[a],
                                "sort-name": d.name,
                                "sort-total": 0
                            }).append(e.createReportQuantityCell(o[a])).append(e.createReportBuildingCell(d));
                            switch (d.production.__class__) {
                            case "AutomaticProductionVO":
                                let a = d.production.products[0]
                                  , i = a.revenue.resources[t]
                                  , o = !0;
                                if ("money" === t)
                                    switch (d.base_name) {
                                    case "B_All_AW2":
                                        i = Math.ceil(e.getEffectValue("building_production_boost", d) * n.moneyCap),
                                        o = !1
                                    }
                                else if ("supplies" === t)
                                    switch (d.base_name) {
                                    case "B_All_AW3":
                                    case "B_Fairies_AW1":
                                        i = Math.ceil(e.getEffectValue("building_production_boost", d) * n.suppliesCap),
                                        o = !1
                                    }
                                else if ("orcs" === t)
                                    switch (d.base_name) {
                                    case "B_Orcs_AW1":
                                        i = Math.ceil(e.getEffectValue("building_production_boost", d) * n.completedProvinces),
                                        o = !1
                                    }
                                else if ("mana" === t)
                                    switch (d.base_name) {
                                    case "B_Gr5_AW1":
                                        i = Math.ceil(e.getEffectValue("building_production_boost", d) * n.completedProvinces),
                                        o = !1
                                    }
                                else if ("seeds" === t)
                                    switch (d.base_name) {
                                    case "B_Gr6_AW2":
                                        i = Math.ceil(e.getEffectValue("building_production_boost", d) * n.mainLevels),
                                        o = !1;
                                        break;
                                    case "Y_Humans_Trader":
                                    case "Y_Elves_Trader":
                                        i = Math.ceil(n.mainLevels * n.completedProvinces),
                                        o = !1
                                    }
                                s.append(e.createReportProductionAutomaticCell(t, i, a.production_time, o));
                                break;
                            case "ManualProductionVO":
                                s.append(e.createReportProductionManualCell(t, d))
                            }
                            s.append(e.createReportSubtotalCell(0)).appendTo(i.find("tbody")).trigger("refresh-row")
                        }
                        if (d.production.products.some(function(e) {
                            return !!e.requiredResources && e.requiredResources.resources[t] > 0
                        })) {
                            let n = null;
                            switch (d.production.__class__) {
                            case "AutomaticProductionVO":
                                n = d.production.products[0];
                                break;
                            case "ManualProductionVO":
                                for (let t = 0; t < e.userStartup.ea_data.producing.length; t++) {
                                    let a = e.userStartup.ea_data.producing[t];
                                    if (a.cityentity_id === d.id) {
                                        for (let e = 0; e < d.production.products.length; e++) {
                                            let t = d.production.products[e];
                                            if (t.production_option === a.production_option) {
                                                n = t;
                                                break
                                            }
                                        }
                                        break
                                    }
                                }
                            }
                            n && n.requiredResources.resources[t] >= 0 && $("<tr></tr>").attr({
                                "data-base-name": d.base_name,
                                "data-cityentity-id": d.id
                            }).data({
                                "sort-quantity": o[a],
                                "sort-name": d.name,
                                "sort-total": 0
                            }).append(e.createReportQuantityCell(o[a])).append(e.createReportBuildingCell(d)).append(e.createReportProductionAutomaticCell(t, n.requiredResources.resources[t], n.production_time, !1)).append(e.createReportSubtotalCell(0)).appendTo(s.find("tbody")).trigger("refresh-row")
                        }
                    }
                }
                i.trigger("refresh-footer"),
                s.trigger("refresh-footer"),
                s.add(s.prev("h3")).toggle(s.find("tbody tr").length > 0),
                e.elements.productionModal.modal("refresh")
            }
        })
    },
    initTrainingModal: function() {
        const e = this;
        let t = $('[data-cmd="opentrainingmodal"]', e.elements.plannerReport)
          , a = $('table[data-table="provided"]', e.elements.trainingModal);
        t.on("click", function() {
            e.elements.trainingModal.modal("show")
        }),
        e.addReportSort(a),
        e.elements.trainingModal.modal({
            onHidden: function() {
                a.find("tbody").empty(),
                e.clearReportSort(a)
            },
            onShow: function() {
                let t = {
                    armoryLevels: 0
                };
                for (let a = 0; a < e.userStartup.city_map.entities.length; a++) {
                    let n = e.userStartup.city_map.entities[a];
                    if (e.isIgnored(n))
                        continue;
                    let i = e.findBuilding(n.cityentity_id);
                    null !== i && "armory" === i.type && (t.armoryLevels += i.level)
                }
                let n = e.game.startup.army_details.baseClusterSize;
                $("<tr></tr>").attr({
                    "data-base-name": "O_Humans_Armory",
                    "data-cityentity-id": "O_Humans_Armory_1"
                }).data({
                    "sort-quantity": 1,
                    "sort-name": e.data.resources.basicTrainingSize,
                    "sort-unit": n,
                    "sort-tile": 0,
                    "sort-total": n
                }).append(e.createReportQuantityCell(1)).append(e.createReportBuildingCell('<i class="my-icon"></i> ' + e.data.resources.basicTrainingSize)).append(e.createReportUnitCell(n)).append(e.createReportSubtotalCell(n)).appendTo(a.find("tbody"));
                let i = n
                  , s = e.getBuildingCounts();
                for (let n in s) {
                    let o = n.split("#")
                      , l = o[0]
                      , r = (o[1],
                    e.findBuilding(l));
                    if (r) {
                        let o = null;
                        switch (r.base_name) {
                        case "B_Dwarfs_AW1":
                            o = e.userStartup.ea_data && e.userStartup.ea_data.battleSquadsize ? Math.ceil(e.getEffectValue("increase_barracks_training_size", r) * e.userStartup.ea_data.battleSquadsize) : 0;
                            break;
                        case "B_Orcs_AW2":
                            o = Math.ceil(e.getEffectValue("training_size_per_armory_level", r) * t.armoryLevels);
                            break;
                        case "O_Humans_Armory":
                        case "O_Elves_Armory":
                            o = Math.ceil(e.getEffectValue("armory_training_slot_increase", r))
                        }
                        if (o) {
                            let t = o * s[l];
                            i += t,
                            $("<tr></tr>").attr({
                                "data-base-name": r.base_name,
                                "data-cityentity-id": r.id
                            }).data({
                                "sort-quantity": s[n],
                                "sort-name": r.name,
                                "sort-unit": o,
                                "sort-tile": o / r.width / r.length,
                                "sort-total": t
                            }).append(e.createReportQuantityCell(s[l])).append(e.createReportBuildingCell(r)).append(e.createReportUnitCell(o, r)).append(e.createReportSubtotalCell(t)).appendTo(a.find("tbody"))
                        }
                    }
                }
                a.find('tfoot [data-cell="total"]').html("<strong>" + i.toLocaleString(e.variables.locale) + "</strong>"),
                e.elements.trainingModal.modal("refresh")
            }
        })
    },
    initWondersModal: function() {
        const e = this;
        let t = $('[data-cmd="openwondersmodal"]', e.elements.plannerReport)
          , a = $('table[data-table="provided"]', e.elements.wondersModal);
        t.on("click", function() {
            e.elements.wondersModal.modal("show")
        }),
        e.addReportSort(a),
        e.elements.wondersModal.modal({
            onHidden: function() {
                a.find("tbody").empty(),
                e.clearReportSort(a)
            },
            onShow: function() {
                let t = 0
                  , n = e.getBuildingCounts();
                for (let i in n) {
                    let s = i.split("#")
                      , o = s[0]
                      , l = (s[1],
                    e.findBuilding(o));
                    if (l) {
                        let i = null;
                        if ("ancient_wonder" === l.type && (i = l.level),
                        i) {
                            let s = i * n[o];
                            t += s,
                            $("<tr></tr>").attr({
                                "data-base-name": l.base_name,
                                "data-cityentity-id": l.id
                            }).data({
                                "sort-name": l.name,
                                "sort-total": s
                            }).append(e.createReportBuildingCell(l)).append(e.createReportSubtotalCell(s)).appendTo(a.find("tbody"))
                        }
                    }
                }
                a.find('tfoot [data-cell="total"]').html("<strong>" + t.toLocaleString(e.variables.locale) + "</strong>"),
                e.elements.wondersModal.modal("refresh")
            }
        })
    },
    initRestorationModal: function() {
        const e = this;
        let t = $('[data-cmd="openrestorationmodal"]', e.elements.plannerReport)
          , a = $('table[data-table="provided"]', e.elements.wondersModal);
        t.on("click", function() {
            e.elements.restorationModal.modal("show")
        }),
        e.addReportSort(a),
        e.elements.restorationModal.modal({
            onHidden: function() {
                a.find("tbody").empty(),
                e.clearReportSort(a)
            },
            onShow: function() {
                let t = 0
                  , n = e.getBuildingCounts();
                for (let i in n) {
                    let s = i.split("#")
                      , o = s[0]
                      , l = (s[1],
                    e.findBuilding(o));
                    if (l) {
                        let i = null;
                        if ("ancient_wonder" === l.type && (i = l.level),
                        i) {
                            let s = i * n[o];
                            t += s,
                            $("<tr></tr>").attr({
                                "data-base-name": l.base_name,
                                "data-cityentity-id": l.id
                            }).data({
                                "sort-name": l.name,
                                "sort-total": s
                            }).append(e.createReportBuildingCell(l)).append(e.createReportSubtotalCell(s)).appendTo(a.find("tbody"))
                        }
                    }
                }
                a.find('tfoot [data-cell="total"]').html("<strong>" + t.toLocaleString(e.variables.locale) + "</strong>"),
                e.elements.wondersModal.modal("refresh")
            }
        })
    },
    load: function() {
        const e = this;
        e.data.load ? (e.assignUserStartup(e.data.load),
        e.loadExisting()) : e.loadNew()
    },
    loadExisting: function() {
        this.elements.loadingModal.modal("show")
    },
    loadNew: function() {
        this.elements.raceModal.modal("show")
    },
    assignUserStartup: function(e) {
        const t = this;
        if (e) {
            t.userStartup = $.extend(!0, {}, t.userStartupDefault, e),
            t.userStartup.ea_data || (t.userStartup.ea_data = $.extend({}, t.userStartupDefault.ea_data));
            for (let e = 0; e < t.userStartup.city_map.entities.length; e++) {
                var a = t.userStartup.city_map.entities[e];
                a.id = e + 1,
                a.x = Math.round(a.x),
                a.y = Math.round(a.y),
                a.cityentity_id = t.convertCityEntityId(a.cityentity_id)
            }
        }
    },
    draw: function() {
        this.drawReport(),
        this.drawBuildModal(),
        this.drawMacrosModal(),
        this.drawRelicsModal(),
        this.drawMapExpansions(),
        this.drawMapBuildings()
    },
    drawReport: function() {
        const e = this;
        $('.list[data-list="production"] .item[data-resource]', e.elements.plannerReport).each(function() {
            let t = $(this)
              , a = e.findGood(t.data("resource"));
            a && t.find(".header").html(a.name + ' <i class="red exclamation icon" style="display:none;"></i>')
        })
    },
    drawBuildModal: function() {
        const e = this;
        let t = [];
        t = (t = (t = t.concat(e.userStartup.user_data.race)).concat(e.settings.races.guest)).concat(e.settings.races.all);
        let a = [{
            name: "build-start",
            category: "void",
            types: ["main_building", "worker_hut"]
        }, {
            name: "build-basics",
            category: "basics"
        }, {
            name: "build-military",
            category: "military"
        }, {
            name: "build-goods",
            category: "manufactories"
        }, {
            name: "build-culture",
            category: "wealth"
        }, {
            name: "build-settlements",
            category: "races"
        }, {
            name: "build-wonders",
            category: "ancient_wonders"
        }, {
            name: "build-events",
            category: "non_purchasable",
            isChapterBased: !0
        }];
        for (let n = 0; n < a.length; n++) {
            let i = a[n]
              , s = $('.ui.tab[data-tab="' + i.name + '"]', e.elements.buildModal).empty()
              , o = $('<div class="ui three column grid">').appendTo(s);
            for (let a = 0; a < e.game.buildings.length; a++) {
                let n = e.game.buildings[a];
                if (1 === n.level && t.indexOf(n.race) > -1 && (!i.category || n.category === i.category) && (!i.types || i.types.indexOf(n.type) > -1 && 1 === n.level) && (!i.isChapterBased || e.isChapterBased(n))) {
                    let t = e.findBuildingLevels(n)
                      , a = {
                        base_name: n.base_name,
                        name: n.name,
                        is_premium: e.isPremiumEntity(n),
                        levels: {
                            is_disabled: !0,
                            default_text: void 0,
                            default_value: void 0,
                            options: []
                        },
                        stages: {
                            is_disabled: !0,
                            default_text: void 0,
                            default_value: void 0,
                            options: []
                        },
                        extra: void 0
                    };
                    for (let n = 0; n < t.length; n++) {
                        let i = t[n]
                          , s = {
                            text: e.getLevelText(i),
                            value: i.id
                        };
                        0 === n && (a.levels.default_text = s.text,
                        a.levels.default_value = s.value,
                        s.selected = !0),
                        a.levels.options.push(s)
                    }
                    if (a.levels.is_disabled = 1 === a.levels.options.length,
                    e.isEvolvingBuilding(n)) {
                        for (let t = 0; t < e.game.evolving.length; t++) {
                            let i = e.game.evolving[t];
                            if (i.baseName === n.base_name) {
                                for (let t = 0; t < i.stages.length; t++) {
                                    let n = i.stages[t]
                                      , s = {
                                        text: e.getStageText(n.id),
                                        value: n.id
                                    };
                                    0 === t && (a.stages.default_text = s.text,
                                    a.stages.default_value = s.value,
                                    s.selected = !0),
                                    a.stages.options.push(s)
                                }
                                break
                            }
                        }
                        a.stages.is_disabled = 0 === a.stages.options.length
                    }
                    a.extra = a.stages.is_disabled ? e.getExtraHtml(n) : e.getExtraHtml(n, a.stages.options[0].value),
                    $(Mustache.render(e.templates.build, a)).appendTo(o)
                }
            }
        }
        $(".ui.dropdown", e.elements.buildModal).filter(".disabled").css("visibility", "hidden"),
        $(".ui.dropdown", e.elements.buildModal).filter(":not(.disabled)").dropdown({
            onChange: function() {
                let t = $(this)
                  , a = t.closest(".ui.form")
                  , n = a.find('[data-var="level"]').dropdown("get value")
                  , i = a.find('[data-var="stage"]').dropdown("get value")
                  , s = e.findBuilding(n);
                s && t.closest(".ui.card").find(".extra.content").html(e.getExtraHtml(s, i))
            }
        }),
        e.elements.buildModal.trigger("tabchange")
    },
    drawMacrosModal: function() {
        const e = this;
        let t = e.elements.macrosModal.find('table[data-table="streets"] .ui.dropdown')
          , a = t.find(".menu")
          , n = void 0;
        for (let t = 0; t < e.game.buildings.length; t++) {
            let i = e.game.buildings[t];
            "street" === i.type && i.race === e.userStartup.user_data.race && (a.append('<div class="item" data-value="' + i.id + '">' + i.name + "</div>"),
            n = i.id)
        }
        a.find(".item:last-child").addClass("active"),
        t.dropdown("set selected", n)
    },
    drawRelicsModal: function() {
        const e = this;
        $('table[data-type="count"] tr[data-type="relic"] td', e.elements.relicsModal).each(function() {
            let t = $(this)
              , a = e.findGood(t.data("resource"));
            a && t.attr({
                "data-tooltip": a.name,
                "data-inverted": ""
            })
        }),
        $('table[data-type="count"] tr[data-type="amount"] input', e.elements.relicsModal).each(function() {
            let t = $(this)
              , a = t.closest("td");
            t.val("");
            for (let n = 0; n < e.userStartup.ea_data.relicCounts.length; n++)
                e.userStartup.ea_data.relicCounts[n].relic_id === a.data("resource") && t.val(e.userStartup.ea_data.relicCounts[n].amount)
        }),
        $('table[data-type="boost"]', e.elements.relicsModal).each(function() {
            let t = $(this)
              , a = t.find(".ui.dropdown");
            a.find(".item").each(function() {
                let a = $(this)
                  , n = a.data("value");
                if ("" === n)
                    a.html('<span class="disabled asset"><img src="/img/icons/misc/goods.png" /></span>&nbsp;&nbsp;&nbsp;' + e.data.resources.none);
                else {
                    switch (t.data("good-type")) {
                    case "sentient":
                        n = t.data("good-type") + n
                    }
                    let i = e.findGood(n);
                    i && a.html('<span class="boosted asset"><img src="/img/icons/resources/' + i.id + '.png" /></span>&nbsp;&nbsp;&nbsp;' + i.name)
                }
            });
            let n = "";
            for (let a = 0; a < e.userStartup.ea_data.relicBoosts.length; a++) {
                let i = e.userStartup.ea_data.relicBoosts[a];
                if (i.good_type === t.data("good-type") && i.quality === t.data("quality")) {
                    n = i.good_id;
                    break
                }
            }
            a.dropdown("set selected", n)
        })
    },
    drawMapExpansions: function() {
        const e = this;
        e.variables.rotatedHeight = e.game.startup.mapSize.height * e.options.cellSize,
        e.elements.mapExpansions.empty(),
        e.elements.mapExpansions.css({
            width: e.options.rotateMap ? e.game.startup.mapSize.height * e.options.cellSize : e.game.startup.mapSize.width * e.options.cellSize,
            height: e.options.rotateMap ? e.game.startup.mapSize.width * e.options.cellSize : e.game.startup.mapSize.height * e.options.cellSize
        });
        for (let t = 0; t < e.game.startup.mapSize.height / e.settings.expansions.cells.y; t++)
            for (let a = 0; a < e.game.startup.mapSize.width / e.settings.expansions.cells.x; a++) {
                let n = {
                    width: e.settings.expansions.cells.x * e.options.cellSize,
                    height: e.settings.expansions.cells.y * e.options.cellSize,
                    top: e.options.rotateMap ? e.settings.expansions.cells.x * e.options.cellSize * a : e.settings.expansions.cells.y * e.options.cellSize * t,
                    left: e.options.rotateMap ? e.game.startup.mapSize.height * e.options.cellSize - e.settings.expansions.cells.y * e.options.cellSize * (t + 1) : e.settings.expansions.cells.x * e.options.cellSize * a
                }
                  , i = $(Mustache.render(e.templates.expansion, n)).data({
                    x: e.settings.expansions.cells.x * a,
                    y: e.settings.expansions.cells.y * t
                }).appendTo(e.elements.mapExpansions);
                for (let t = 0; t < e.userStartup.city_map.unlocked_areas.length; t++) {
                    let a = e.userStartup.city_map.unlocked_areas[t];
                    if (i.data("x") >= (a.x || 0) && i.data("x") < (a.x || 0) + a.width && i.data("y") >= (a.y || 0) && i.data("y") < (a.y || 0) + a.length) {
                        i.addClass("unlocked");
                        break
                    }
                }
            }
    },
    drawMapBuildings: function() {
        const e = this;
        e.elements.mapBuildings.empty();
        for (let t = 0; t < e.userStartup.city_map.entities.length; t++) {
            let a = e.userStartup.city_map.entities[t]
              , n = e.findBuilding(a.cityentity_id);
            n && e.createBuilding(n, a.stage).data({
                id: a.id,
                x: a.x,
                y: a.y
            }).css({
                top: e.options.rotateMap ? a.x * e.options.cellSize : a.y * e.options.cellSize,
                left: e.options.rotateMap ? e.variables.rotatedHeight - a.y * e.options.cellSize - n.length * e.options.cellSize : a.x * e.options.cellSize
            }).appendTo(e.elements.mapBuildings)
        }
    },
    updateReport: function() {
        const e = this;
        if (e.elements.plannerReport.sidebar("is visible")) {
            let t = {
                trainingSize: e.game.startup.army_details.baseClusterSize,
                wonderLevels: 0,
                royalRestoration: 0,
                levels: [],
                production: [],
                points: {
                    total: 0,
                    population: 0,
                    culture: 0,
                    encounters: 0,
                    wonders: 0,
                    wonderEffect: 0,
                    tournaments: 0
                },
                coverage: {
                    unlocked: 0,
                    empty: 0,
                    residential: 0,
                    production: 0,
                    goods: 0,
                    wonders: 0,
                    cultural: 0,
                    street: 0,
                    guest: 0
                },
                temp: {
                    moneyCap: 0,
                    suppliesCap: 0,
                    mainLevels: 0,
                    mainRankingPoints: 0,
                    armoryLevels: 0,
                    abyssPopulationBonus: 0,
                    abyssProductionBonus: 0,
                    excavationProductionBonus: 0,
                    prosperityProductionBonus: 0,
                    heroesProductionBonus: 0,
                    mazeProductionBonus: 0,
                    sanctuaryBonus: 0,
                    monasteryBonus: 0,
                    watchtowerBonus: 0,
                    thronesPointsBonus: 0,
                    thronesCultureBonus: 0,
                    hallsPopulationBonus: 0,
                    bulwarkBonus: 0,
                    shrewdyBonus: 0,
                    tradeBonus: 0,
                    seedsFactor: 0,
                    prestigeBonus: 0,
                    youthPopulationBonus: 0,
                    youthCultureBonus: 0,
                    residencePopulation: 0
                }
            };
            for (let a = 0; a < e.settings.report.levels.length; a++) {
                let n = e.settings.report.levels[a];
                t.levels[n] = {
                    provided: 0,
                    required: 0,
                    available: 0,
                    show: !0
                }
            }
            for (let a = 0; a < e.settings.report.production.length; a++) {
                let n = e.settings.report.production[a];
                t.production[n] = {
                    produced: 0,
                    consumed: 0,
                    remaining: 0,
                    show: "money" === n || "supplies" === n,
                    advanced: "money" === n || "supplies" === n,
                    alert: !1
                }
            }
            e.updateReportUi(t);
            for (let a = 0; a < e.userStartup.city_map.unlocked_areas.length; a++) {
                let n = e.userStartup.city_map.unlocked_areas[a];
                (n.x || 0) >= 15 && (n.x || 0) < 25 && (n.y || 0) >= 0 && (n.y || 0) < 15 && 5 === n.width && 5 === n.length || (t.coverage.unlocked += n.width * n.length)
            }
            t.coverage.empty = t.coverage.unlocked;
            for (let a = 0; a < e.userStartup.city_map.entities.length; a++) {
                let n = e.userStartup.city_map.entities[a]
                  , i = e.findBuilding(n.cityentity_id);
                if (i) {
                    if (e.isIgnored(n))
                        continue;
                    for (let a = 0; a < e.settings.report.levels.length; a++) {
                        let s = e.settings.report.levels[a]
                          , o = e.getProvision(i, s);
                        o && (e.isEvolvingBuilding(i) ? t.levels[s].provided += e.calculateProvision(i, n.stage, s, o) : t.levels[s].provided += o);
                        let l = e.getRequirement(i, s);
                        l && (t.levels[s].required += l)
                    }
                    i.rankingPoints && (t.points.total += i.rankingPoints);
                    let a = i.width * i.length;
                    if (t.coverage.empty -= a,
                    e.settings.races.guest.indexOf(i.race) > -1 && ["portal", "goods", "street"].indexOf(i.type) > -1)
                        t.coverage.guest += a;
                    else if (["B_Gr7_CanalNS", "B_Gr7_CanalEW", "B_Gr8_Monument1", "B_Gr8_Monument2", "B_Gr8_Monument3", "B_Gr8_Monument4"].indexOf(i.base_name) > -1)
                        t.coverage.guest += a;
                    else
                        switch (i.type) {
                        case "residential":
                        case "premium_residential":
                            t.coverage.residential += a;
                            break;
                        case "production":
                        case "premium_production":
                            t.coverage.production += a;
                            break;
                        case "goods":
                            t.coverage.goods += a;
                            break;
                        case "ancient_wonder":
                            t.coverage.wonders += a;
                            break;
                        case "culture":
                            t.coverage.cultural += a;
                            break;
                        case "street":
                            t.coverage.street += a
                        }
                    if (i.production && i.production.products) {
                        let a = null;
                        switch (i.production.__class__) {
                        case "AutomaticProductionVO":
                            a = i.production.products[0].production_option;
                            break;
                        case "ManualProductionVO":
                            for (let t = 0; t < e.userStartup.ea_data.producing.length; t++) {
                                let n = e.userStartup.ea_data.producing[t];
                                if (n.cityentity_id === i.id) {
                                    a = Number(n.production_option);
                                    break
                                }
                            }
                        }
                        for (let n = 0; n < i.production.products.length; n++) {
                            let s = i.production.products[n];
                            if (s.revenue)
                                for (let n in s.revenue.resources)
                                    if (t.production[n]) {
                                        if (t.production[n].show = !0,
                                        s.production_option === a) {
                                            let a = e.calculateBoostedAmount(n, s.revenue.resources[n]);
                                            t.production[n].produced += e.calculateDailyAmount(a, s.production_time)
                                        }
                                        null === a && (t.production[n].alert = !0)
                                    }
                            if (s.requiredResources)
                                for (let n in s.requiredResources.resources)
                                    t.production[n] && (t.production[n].show = !0,
                                    s.production_option === a && (t.production[n].consumed += e.calculateDailyAmount(s.requiredResources.resources[n], s.production_time)))
                        }
                    }
                    switch (i.base_name) {
                    case "B_All_AW2":
                        t.temp.abyssPopulationBonus = e.getEffectValue("available_population_bonus", i),
                        t.temp.abyssProductionBonus = e.getEffectValue("building_production_boost", i);
                        break;
                    case "B_All_AW3":
                        t.temp.excavationProductionBonus = e.getEffectValue("building_production_boost", i);
                        break;
                    case "B_Humans_AW1":
                        t.temp.sanctuaryBonus = e.getEffectValue("available_culture_bonus", i);
                        break;
                    case "B_Elves_AW1":
                        t.temp.monasteryBonus = e.getEffectValue("available_culture_bonus", i);
                        break;
                    case "B_All_AW5":
                        t.temp.watchtowerBonus = e.getEffectValue("available_culture_bonus", i);
                        break;
                    case "B_All_AW6":
                        t.temp.thronesPointsBonus = e.getEffectValue("aw_ranking_points_bonus", i),
                        t.temp.thronesCultureBonus = e.getEffectValue("culture_by_ranking_points", i);
                        break;
                    case "B_Dwarfs_AW1":
                        t.temp.bulwarkBonus = e.getEffectValue("increase_barracks_training_size", i);
                        break;
                    case "B_Dwarfs_AW2":
                        t.temp.hallsPopulationBonus = e.getEffectValue("available_population_bonus", i);
                        break;
                    case "B_Fairies_AW1":
                        t.temp.prosperityProductionBonus = e.getEffectValue("building_production_boost", i);
                        break;
                    case "B_Orcs_AW1":
                        t.temp.heroesProductionBonus = e.getEffectValue("building_production_boost", i);
                        break;
                    case "B_Orcs_AW2":
                        t.temp.shrewdyBonus = e.getEffectValue("training_size_per_armory_level", i);
                        break;
                    case "B_Gr5_AW1":
                        t.temp.mazeProductionBonus = e.getEffectValue("building_production_boost", i);
                        break;
                    case "B_Gr6_AW2":
                        t.temp.tradeBonus = e.getEffectValue("building_production_boost", i);
                        break;
                    case "B_Gr10_AW2":
                        t.temp.youthPopulationBonus = (1e3 * e.getEffectValue("residential_population_boost", i) - 1e3) / 1e3,
                        t.temp.youthCultureBonus = e.getEffectValue("available_culture_bonus", i);
                        break;
                    case "Y_Humans_Trader":
                    case "Y_Elves_Trader":
                        t.temp.seedsFactor = 1;
                        break;
                    case "O_Humans_Armory":
                    case "O_Elves_Armory":
                        t.trainingSize += e.getEffectValue("armory_training_slot_increase", i)
                    }
                    switch (i.type) {
                    case "main_building":
                        t.temp.moneyCap = e.getCapacity(i, "money"),
                        t.temp.suppliesCap = e.getCapacity(i, "supplies"),
                        t.temp.mainLevels = i.level,
                        t.temp.mainRankingPoints = i.rankingPoints;
                        break;
                    case "ancient_wonder":
                        t.wonderLevels += i.level,
                        t.points.wonders += i.rankingPoints;
                        break;
                    case "armory":
                        t.temp.armoryLevels += i.level;
                        break;
                    case "residential":
                    case "premium_residential":
                        t.temp.residencePopulation += e.getProvision(i, "population")
                    }
                }
            }
            t.levels.population.provided += 0 + Math.ceil(t.levels.population.required * t.temp.abyssPopulationBonus) + Math.ceil(t.levels.population.required * t.temp.hallsPopulationBonus) + Math.ceil(t.temp.residencePopulation * t.temp.youthPopulationBonus),
            t.levels.culture.provided += 0 + Math.ceil(e.userStartup.ea_data.battleSquadsize * t.temp.sanctuaryBonus) + Math.ceil(e.userStartup.ea_data.battleSquadsize * t.temp.monasteryBonus) + Math.ceil(e.userStartup.ea_data.battleSquadsize * t.temp.watchtowerBonus) + Math.ceil(e.userStartup.ea_data.battleSquadsize * t.temp.youthCultureBonus) + Math.ceil(t.wonderLevels * t.temp.mainRankingPoints * t.temp.thronesCultureBonus),
            t.trainingSize += Math.ceil(e.userStartup.ea_data.battleSquadsize * t.temp.bulwarkBonus) + Math.ceil(t.temp.armoryLevels * t.temp.shrewdyBonus),
            t.production.money.produced += e.calculateBoostedAmount("money", e.calculateDailyAmount(t.temp.moneyCap * t.temp.abyssProductionBonus, e.constants.time.secondsPer3h)),
            t.production.supplies.produced += e.calculateBoostedAmount("supplies", e.calculateDailyAmount(t.temp.suppliesCap * t.temp.excavationProductionBonus, e.constants.time.secondsPer1d)) + e.calculateBoostedAmount("supplies", e.calculateDailyAmount(t.temp.suppliesCap * t.temp.prosperityProductionBonus, e.constants.time.secondsPer3h)),
            t.production.orcs.produced += Math.ceil(e.userStartup.ea_data.completedProvinces * t.temp.heroesProductionBonus),
            t.production.mana.produced += e.calculateDailyAmount(e.userStartup.ea_data.completedProvinces * t.temp.mazeProductionBonus, e.constants.time.secondsPer3h),
            t.production.seeds.produced += Math.ceil(e.userStartup.ea_data.completedProvinces * t.temp.mainLevels * t.temp.seedsFactor) + e.calculateDailyAmount(t.temp.mainLevels * t.temp.tradeBonus, e.constants.time.secondsPer12h),
            t.points.wonderEffect += Math.ceil(t.wonderLevels * t.temp.thronesPointsBonus);
            for (let a = 0; a < e.settings.report.levels.length; a++) {
                let n = e.settings.report.levels[a];
                t.levels[n].available = t.levels[n].provided - t.levels[n].required
            }
            for (let a = 0; a < e.settings.report.production.length; a++) {
                let n = e.settings.report.production[a];
                t.production[n].remaining = t.production[n].produced - t.production[n].consumed
            }
            t.points.population = t.levels.population.required,
            t.points.culture = t.levels.culture.required,
            t.points.encounters = e.userStartup.ea_data.encountersPoints,
            t.points.tournaments = e.userStartup.ea_data.tournamentPoints,
            t.points.total += t.points.encounters + t.points.tournaments + t.points.wonderEffect,
            e.updateReportUi(t)
        }
    },
    updateReportUi: function(e) {
        const t = this;
        $('.item[data-cmd="setvariablebydropdown"]', t.elements.plannerReport).each(function() {
            let e = $(this)
              , a = e.find(".ui.dropdown")
              , n = a.dropdown("get item", t.userStartup.ea_data[e.data("arg")]);
            n && a.dropdown("set text", n.text())
        }),
        $('.item[data-cmd="setvariablebyinput"]', t.elements.plannerReport).each(function() {
            let e = $(this);
            e.find(".ui.dropdown").dropdown("set text", t.userStartup.ea_data[e.data("arg")].toLocaleString(t.variables.locale))
        }),
        $('.item[data-cmd="openrelicsmodal"]', t.elements.plannerReport).each(function() {
            let e = $(this).find(".description").empty()
              , a = [];
            for (let e = 0; e < t.userStartup.ea_data.relicBoosts.length; e++) {
                let n = t.userStartup.ea_data.relicBoosts[e]
                  , i = n.good_id;
                switch (n.good_type) {
                case "sentient":
                    i = n.good_type + n.good_id
                }
                let s = t.findGood(i);
                s && a.push(s.name)
            }
            if (a.length > 0)
                for (let t = 0; t < a.length; t++)
                    e.append("<div>" + a[t] + "</div>");
            else
                e.append("<div>" + t.data.resources.none + "</div>")
        }),
        $('[data-var="trainingsize"]', t.elements.plannerReport).text(e.trainingSize.toLocaleString(t.variables.locale)),
        $('[data-var="wonderlevels"]', t.elements.plannerReport).text(e.wonderLevels.toLocaleString(t.variables.locale)),
        $('[data-var="royalrestoration"]', t.elements.plannerReport).text(e.royalRestoration.toLocaleString(t.variables.locale));
        for (let a = 0; a < t.settings.report.levels.length; a++) {
            let n = t.settings.report.levels[a]
              , i = e.levels[n];
            $('[data-var="levels_' + n + '_provided"]', t.elements.plannerReport).text(i.provided.toLocaleString(t.variables.locale)),
            $('[data-var="levels_' + n + '_required"]', t.elements.plannerReport).text(i.required.toLocaleString(t.variables.locale)),
            $('[data-var="levels_' + n + '_available"]', t.elements.plannerReport).text(i.available.toLocaleString(t.variables.locale)).closest(".description").css("color", i.available < 0 ? "red" : "lime")
        }
        for (let a = 0; a < t.settings.report.production.length; a++) {
            let n = t.settings.report.production[a]
              , i = e.production[n]
              , s = $('.list[data-list="production"] .item[data-cmd="openproductionmodal"][data-resource="' + n + '"]', t.elements.plannerReport).toggle(i.show);
            s.find(".icon").toggle(i.alert),
            s.find('[data-var="produced"]').text(i.produced.toLocaleString(t.variables.locale)),
            i.advanced && (s.find('[data-var="consumed"]').text(i.consumed.toLocaleString(t.variables.locale)),
            s.find('[data-var="remaining"]').text(i.remaining.toLocaleString(t.variables.locale)).closest(".description").css("color", i.remaining < 0 ? "red" : "lime"))
        }
        $('[data-var="points_population"]', t.elements.plannerReport).text(e.points.population.toLocaleString(t.variables.locale)),
        $('[data-var="points_culture"]', t.elements.plannerReport).text(e.points.culture.toLocaleString(t.variables.locale)),
        $('[data-var="points_wonders"]', t.elements.plannerReport).text(e.points.wonders.toLocaleString(t.variables.locale)),
        $('[data-var="points_wondereffect"]', t.elements.plannerReport).text(e.points.wonderEffect.toLocaleString(t.variables.locale)).closest(".item").toggle(e.points.wonderEffect > 0),
        $('[data-var="points_total"]', t.elements.plannerReport).text(e.points.total.toLocaleString(t.variables.locale));
        const a = {
            minimumFractionDigits: 2,
            maximumFractionDigits: 2
        };
        $('[data-var="coverage_unlocked"]', t.elements.plannerReport).text(e.coverage.unlocked.toLocaleString(t.variables.locale)),
        $('[data-var="coverage_empty"]', t.elements.plannerReport).text(e.coverage.empty.toLocaleString(t.variables.locale)),
        $('[data-var="coverage_empty_percent"]', t.elements.plannerReport).text((e.coverage.empty / e.coverage.unlocked * 100).toLocaleString(t.variables.locale, a)),
        $('[data-var="coverage_residential"]', t.elements.plannerReport).text(e.coverage.residential.toLocaleString(t.variables.locale)),
        $('[data-var="coverage_residential_percent"]', t.elements.plannerReport).text((e.coverage.residential / e.coverage.unlocked * 100).toLocaleString(t.variables.locale, a)),
        $('[data-var="coverage_production"]', t.elements.plannerReport).text(e.coverage.production.toLocaleString(t.variables.locale)),
        $('[data-var="coverage_production_percent"]', t.elements.plannerReport).text((e.coverage.production / e.coverage.unlocked * 100).toLocaleString(t.variables.locale, a)),
        $('[data-var="coverage_goods"]', t.elements.plannerReport).text(e.coverage.goods.toLocaleString(t.variables.locale)),
        $('[data-var="coverage_goods_percent"]', t.elements.plannerReport).text((e.coverage.goods / e.coverage.unlocked * 100).toLocaleString(t.variables.locale, a)),
        $('[data-var="coverage_wonders"]', t.elements.plannerReport).text(e.coverage.wonders.toLocaleString(t.variables.locale)),
        $('[data-var="coverage_wonders_percent"]', t.elements.plannerReport).text((e.coverage.wonders / e.coverage.unlocked * 100).toLocaleString(t.variables.locale, a)),
        $('[data-var="coverage_guest"]', t.elements.plannerReport).text(e.coverage.guest.toLocaleString(t.variables.locale)),
        $('[data-var="coverage_guest_percent"]', t.elements.plannerReport).text((e.coverage.guest / e.coverage.unlocked * 100).toLocaleString(t.variables.locale, a)),
        $('[data-var="coverage_cultural"]', t.elements.plannerReport).text(e.coverage.cultural.toLocaleString(t.variables.locale)),
        $('[data-var="coverage_cultural_percent"]', t.elements.plannerReport).text((e.coverage.cultural / e.coverage.unlocked * 100).toLocaleString(t.variables.locale, a)),
        $('[data-var="coverage_street"]', t.elements.plannerReport).text(e.coverage.street.toLocaleString(t.variables.locale)),
        $('[data-var="coverage_street_percent"]', t.elements.plannerReport).text((e.coverage.street / e.coverage.unlocked * 100).toLocaleString(t.variables.locale, a))
    },
    decodeData: function(e) {
        return (e = e.trim()) ? JSON.parse(atob(e)) : void 0
    },
    encodeData: function(e) {
        return btoa(JSON.stringify(e))
    },
    convertCityEntityId: function(e) {
        return e.replace(/(a)_(evt|sale)_([0-9a-z_]+[a-z]+)([0-9]+)\_1/i, "$1_$2_$3_$4")
    },
    isGaLoaded: function() {
        return window.ga && ga.loaded
    },
    toggleExpansion: function(e) {
        const t = this;
        e.toggleClass("unlocked"),
        e.hasClass("unlocked") ? t.userStartup.city_map.unlocked_areas.push({
            x: e.data("x"),
            y: e.data("y"),
            width: t.settings.expansions.cells.x,
            length: t.settings.expansions.cells.y
        }) : t.userStartup.city_map.unlocked_areas.forEach(function(a, n) {
            (a.x || 0) === e.data("x") && (a.y || 0) === e.data("y") && a.width === t.settings.expansions.cells.x && a.length === t.settings.expansions.cells.y && t.userStartup.city_map.unlocked_areas.splice(n, 1)
        })
    },
    createBuilding: function(e, t) {
        const a = this;
        let n = {
            base_name: e.base_name,
            cityentity_id: e.id,
            title: a.getTitleAttr(e, t),
            width: (a.options.rotateMap ? e.length : e.width) * a.options.cellSize,
            height: (a.options.rotateMap ? e.width : e.length) * a.options.cellSize,
            text: void 0,
            textClass: void 0,
            stage: t,
            classes: []
        };
        if (a.isPremiumEntity(e) && n.classes.push("is-premium"),
        a.hasProvision(e, "population") && n.classes.push("highlight-population"),
        a.hasProvision(e, "culture") && n.classes.push("highlight-culture"),
        a.hasProduction(e, "mana") && n.classes.push("highlight-mana"),
        a.hasProduction(e, "seeds") && n.classes.push("highlight-seeds"),
        !e.requirements || "townhall" !== e.requirements.connectionStrategyId && "set_buildings" !== e.requirements.connectionStrategyId || n.classes.push("highlight-street"),
        a.game.sets)
            for (let t = 0; t < a.game.sets.length; t++)
                for (let i = 0; i < a.game.sets[t].buildings.length; i++)
                    if (a.game.sets[t].buildings[i].baseName === e.base_name) {
                        n.classes.push("highlight-set");
                        break
                    }
        if ("street" === e.type) {
            switch (e.base_name) {
            case "S_Humans_Trail":
            case "S_Elves_Trail":
                n.text = "I";
                break;
            case "S_Humans_Alley":
            case "S_Elves_Alley":
                n.text = "II";
                break;
            case "S_Humans_Road":
            case "S_Elves_Road":
                n.text = "III";
                break;
            case "S_Humans_Street":
            case "S_Elves_Street":
                n.text = "V";
                break;
            case "S_Humans_Dwarven":
            case "S_Elves_Dwarven":
            case "S_Dwarfs_Tracks":
                n.text = "VI";
                break;
            case "S_Humans_Fairies":
            case "S_Elves_Fairies":
            case "S_Fairies_Specialstreet":
                n.text = "VII";
                break;
            case "S_Humans_Orcs":
            case "S_Elves_Orcs":
            case "S_Orcs_Specialstreet":
                n.text = "VIII";
                break;
            case "S_Humans_Gr4":
            case "S_Elves_Gr4":
            case "S_Gr4_Specialstreet":
                n.text = "IX";
                break;
            case "S_Humans_Gr5":
            case "S_Elves_Gr5":
            case "S_Gr5_Specialstreet":
                n.text = "X";
                break;
            case "S_Humans_Gr6":
            case "S_Elves_Gr6":
            case "S_Gr6_Specialstreet":
                n.text = "XI";
                break;
            case "S_Humans_Gr7":
            case "S_Elves_Gr7":
                n.text = "XII";
                break;
            case "S_Humans_Gr8":
            case "S_Elves_Gr8":
                n.text = "XIII";
                break;
            case "S_Humans_Gr9":
            case "S_Elves_Gr9":
                n.text = "XIV";
                break;
            case "S_Humans_Gr10":
            case "S_Elves_Gr10":
                n.text = "XV";
                break;
            case "S_Humans_Gr11":
            case "S_Elves_Gr11":
                n.text = "XVI";
                break;
            case "S_Humans_Ch17":
            case "S_Elves_Ch17":
                n.text = "XVII";
                break;
            case "S_Humans_Ch18":
            case "S_Elves_Ch18":
            case "S_Ch18_Settlementstreet":
                n.text = "XVIII";
                break;
            case "S_Humans_Ch19":
            case "S_Elves_Ch19":
            case "S_Ch19_Settlementstreet":
                n.text = "XIX";
                break;
            case "S_Humans_Ch20":
            case "S_Elves_Ch20":
            case "S_Ch20_Settlementstreet":
                n.text = "XX";
                break;
            case "S_Humans_Ch21":
            case "S_Elves_Ch21":
            case "S_Ch21_Settlementstreet":
                n.text = "XXI";
                break;
            case "S_Humans_Ch22":
            case "S_Elves_Ch22":
            case "S_Ch22_Settlementstreet":
                n.text = "XXII";
                break;
            case "S_Humans_Ch23":
            case "S_Elves_Ch23":
                n.text = "XXIII";
                break;
            default:
                n.text = "?"
            }
            n.textClass = "tier"
        } else
            a.isEvolvingBuilding(e) ? (n.text = a.convertToRomanNumerals(a.getChapterNumber(e)) + "-" + (t || "?"),
            n.textClass = "stage") : a.isChapterBased(e) ? (n.text = a.convertToRomanNumerals(a.getChapterNumber(e)),
            n.textClass = "chapter") : (n.text = e.level,
            n.textClass = "level");
        return $(Mustache.render(a.templates.building, n))
    },
    updateBuilding: function(e) {
        const t = this
          , a = t.getBuildingCoords(e);
        e.data({
            x: a.x,
            y: a.y
        });
        for (let a = 0; a < t.userStartup.city_map.entities.length; a++) {
            const n = t.userStartup.city_map.entities[a];
            if (n.id === e.data("id")) {
                n.y = e.data("y"),
                n.x = e.data("x");
                break
            }
        }
    },
    removeBuilding: function(e) {
        const t = this;
        for (let a = 0; a < t.userStartup.city_map.entities.length; a++) {
            if (t.userStartup.city_map.entities[a].id === e.data("id")) {
                t.userStartup.city_map.entities.splice(a, 1);
                break
            }
        }
        e.remove()
    },
    snapToCell: function(e) {
        return Math.floor(e / this.options.cellSize) * this.options.cellSize
    },
    detectCollision: function(e) {
        e.data("cityentityId");
        const t = Math.round(e.position().left)
          , a = Math.round(e.position().top)
          , n = Math.round(e.width())
          , i = Math.round(e.height())
          , s = this.options.rotateMap ? Math.round(this.game.startup.mapSize.height * this.options.cellSize) : Math.round(this.game.startup.mapSize.width * this.options.cellSize)
          , o = this.options.rotateMap ? Math.round(this.game.startup.mapSize.width * this.options.cellSize) : Math.round(this.game.startup.mapSize.height * this.options.cellSize);
        if ((t + n <= 0 || t >= s || a + i <= 0 || a >= o) === (t >= 0 && t + n <= s && a >= 0 && a + i <= o))
            return !0;
        let l = !1;
        if (this.elements.mapExpansions.find("." + this.settings.classes.expansion + ":not(.unlocked)").each(function() {
            const e = $(this)
              , s = Math.round(e.position().left)
              , o = Math.round(e.position().top)
              , r = Math.round(e.outerWidth())
              , d = Math.round(e.outerHeight());
            if (t + n > s && t < s + r && a + i > o && a < o + d)
                return l = !0,
                !1
        }),
        l)
            return !0;
        let r = !1;
        return this.elements.mapBuildings.find("." + this.settings.classes.building).not(e).each(function() {
            const e = $(this)
              , s = (e.data("cityentityId"),
            Math.round(e.position().left))
              , o = Math.round(e.position().top)
              , l = Math.round(e.width())
              , d = Math.round(e.height());
            if (t + n > s && t < s + l && a + i > o && a < o + d)
                return r = !0,
                !1
        }),
        !!r
    },
    convertToRomanNumerals: function(e) {
        let t = "";
        switch (Number(e)) {
        case 1:
            t = "I";
            break;
        case 2:
            t = "II";
            break;
        case 3:
            t = "III";
            break;
        case 4:
            t = "IV";
            break;
        case 5:
            t = "V";
            break;
        case 6:
            t = "VI";
            break;
        case 7:
            t = "VII";
            break;
        case 8:
            t = "VIII";
            break;
        case 9:
            t = "IX";
            break;
        case 10:
            t = "X";
            break;
        case 11:
            t = "XI";
            break;
        case 12:
            t = "XII";
            break;
        case 13:
            t = "XIII";
            break;
        case 14:
            t = "XIV";
            break;
        case 15:
            t = "XV";
            break;
        case 16:
            t = "XVI";
            break;
        case 17:
            t = "XVII";
            break;
        case 18:
            t = "XVIII";
            break;
        case 19:
            t = "XIX";
            break;
        case 20:
            t = "XX";
            break;
        default:
            t = e
        }
        return t
    },
    convertToFriendlyTime: function(e) {
        let t = " "
          , a = e
          , n = Math.floor(a / this.constants.time.secondsPer1d);
        n > 0 && (t += n + "d "),
        a %= this.constants.time.secondsPer1d;
        let i = Math.floor(a / this.constants.time.secondsPer1h);
        i > 0 && (t += i + "h "),
        a %= this.constants.time.secondsPer1h;
        let s = Math.floor(a / this.constants.time.secondsPer1m);
        s > 0 && (t += s + "m ");
        a %= this.constants.time.secondsPer1m;
        return a > 0 && (t += a + "s "),
        t.trim()
    },
    hasProvision: function(e, t) {
        return e.provisions && e.provisions.resources && e.provisions.resources.resources && e.provisions.resources.resources[t]
    },
    hasProduction: function(e, t) {
        if (e.production && e.production.products)
            for (let a = 0; a < e.production.products.length; a++)
                if (e.production.products[a].revenue.resources[t])
                    return !0;
        return !1
    },
    hasComponent: function(e, t) {
        return void 0 !== e.components && void 0 !== e.components[t]
    },
    isChapterBased: function(e) {
        return this.hasComponent(e, "is_chapter_based")
    },
    isEventBuilding: function(e) {
        return this.hasComponent(e, "is_event_building")
    },
    isEvolvingBuilding: function(e) {
        return this.hasComponent(e, "is_evolving_building")
    },
    isPremiumEntity: function(e) {
        return !this.isEventBuilding(e) && e.is_premium_entity
    },
    isOutsideGrid: function(e) {
        return e.x < 0 || e.x > this.game.startup.mapSize.width - 1 || e.y < 0 || e.y > this.game.startup.mapSize.height - 1
    },
    isIgnored: function(e) {
        return this.options.reportIgnoreOutside && this.isOutsideGrid(e)
    },
    findGood: function(e) {
        const t = this;
        for (let a = 0; a < t.game.startup.goodsList.length; a++) {
            let n = t.game.startup.goodsList[a];
            if (n.id === e)
                return n
        }
    },
    findBuilding: function(e) {
        const t = this;
        for (let a = 0; a < t.game.buildings.length; a++) {
            let n = t.game.buildings[a];
            if (n.id === e)
                return n
        }
        return null
    },
    findBuildingLevels: function(e) {
        const t = this
          , a = [];
        for (let n = 0; n < t.game.buildings.length; n++) {
            let i = t.game.buildings[n];
            i.base_name === e.base_name && a.push(i)
        }
        return a
    },
    findBuildingStages: function(e) {
        let t = this
          , a = [];
        if (t.isEvolvingBuilding(e))
            for (let n = 0; n < t.game.evolving.length; n++) {
                let i = t.game.evolving[n];
                if (i.baseName === e.base_name) {
                    for (let e = 0; e < i.stages.length; e++) {
                        let t = i.stages[e];
                        a.push(t.id)
                    }
                    break
                }
            }
        return a
    },
    getBuildingCounts: function() {
        const e = this;
        let t = [];
        for (let a = 0; a < e.userStartup.city_map.entities.length; a++) {
            let n = e.userStartup.city_map.entities[a];
            if (e.isIgnored(n))
                continue;
            let i = n.stage ? n.cityentity_id + "#" + n.stage : n.cityentity_id;
            t[i] ? t[i]++ : t[i] = 1
        }
        return t
    },
    getBuildingCoords: function(e) {
        const t = this;
        return t.options.rotateMap ? {
            x: Math.round(e.position().top / t.options.cellSize),
            y: Math.round((t.variables.rotatedHeight - e.position().left - e.outerWidth()) / t.options.cellSize)
        } : {
            x: Math.round(e.position().left / t.options.cellSize),
            y: Math.round(e.position().top / t.options.cellSize)
        }
    },
    getTipHtml: function() {
        const e = this;
        if (e.data.tips) {
            const t = Math.floor(Math.random() * e.data.tips.length)
              , a = e.data.tips[t];
            if (e.templates.tip)
                return Mustache.render(e.templates.tip, a)
        }
        return ""
    },
    getLevelText: function(e) {
        const t = this;
        if (t.isChapterBased(e)) {
            if (-1 === ["premium_residential", "premium_workshop", "premium_production"].indexOf(e.type))
                return t.data.resources.chapter + " " + t.convertToRomanNumerals(t.getChapterNumber(e))
        }
        return t.data.resources.level + " " + e.level
    },
    getStageText: function(e) {
        return this.data.resources.stage + " " + (e || "?")
    },
    getChapterNumber: function(e) {
        return this.isChapterBased(e) ? e.level : 1
    },
    getExtraHtml: function(e, t) {
        const a = this;
        let n = {
            left: [],
            right: []
        };
        n.left.push({
            title: a.data.resources.size,
            icon_url: "/img/icons/misc/tiles.png",
            text: e.width + "x" + e.length
        });
        let i = ["culture", "population"];
        for (let s = 0; s < i.length; s++) {
            let o = i[s]
              , l = a.getProvision(e, o);
            l && n.right.push({
                title: a.data.resources[o],
                icon_url: "/img/icons/misc/" + o + ".png",
                text: a.calculateProvision(e, t, o, l).toLocaleString(a.variables.locale)
            })
        }
        if (e.production && e.production.products) {
            let t = e.production.products[0]
              , i = ["seeds", "mana", "orcs"];
            for (let e = 0; e < i.length; e++) {
                let s = i[e];
                t.revenue.resources[s] && n.right.push({
                    title: a.data.resources[s],
                    icon_url: "/img/icons/resources/" + s + ".png"
                })
            }
        }
        return Mustache.render(a.templates.extra, n)
    },
    getTitleAttr: function(e, t) {
        const a = this;
        let n = [];
        a.isEventBuilding(e) && n.push(a.getLevelText(e)),
        a.isEvolvingBuilding(e) && n.push(a.getStageText(t));
        let i = []
          , s = ["population", "culture"];
        for (let n = 0; n < s.length; n++) {
            let o = s[n]
              , l = a.getProvision(e, o);
            l && i.push(a.calculateProvision(e, t, o, l).toLocaleString(a.variables.locale) + " " + a.data.resources[o])
        }
        let o = e.name;
        return n.length > 0 && (o += " (" + n.join(", ") + ")"),
        i.length > 0 && (o += " - " + i.join(", ")),
        o
    },
    getCapacity: function(e, t) {
        return e.capacity && e.capacity.resources[t] ? e.capacity.resources[t] : 0
    },
    getProvision: function(e, t) {
        return e.provisions && e.provisions.resources.resources[t] ? e.provisions.resources.resources[t] : 0
    },
    getRequirement: function(e, t) {
        return e.requirements && e.requirements.resources.resources[t] ? e.requirements.resources.resources[t] : 0
    },
    getEffectValue: function(e, t) {
        const a = this;
        for (let n = 0; n < a.game.effects.length; n++) {
            let i = a.game.effects[n];
            if (i.action === e && i.origins && i.origins.indexOf(t.base_name) > -1)
                return Number(i.values[t.level])
        }
        return 0
    },
    getNextId: function() {
        const e = this;
        let t = 1;
        return e.userStartup.city_map.entities.length > 0 && (t = e.userStartup.city_map.entities[e.userStartup.city_map.entities.length - 1].id + 1),
        t
    },
    getOccupiedTiles: function() {
        const e = this;
        let t = new Array(e.game.startup.mapSize.width);
        for (let a = 0; a < t.length; a++) {
            t[a] = new Array(e.game.startup.mapSize.height);
            for (let e = 0; e < t[a].length; e++)
                t[a][e] = 1
        }
        for (let a = 0; a < e.userStartup.city_map.unlocked_areas.length; a++) {
            let n = e.userStartup.city_map.unlocked_areas[a];
            for (let e = n.x || 0; e < n.x + n.width; e++)
                for (let a = n.y || 0; a < n.y + n.length; a++)
                    t[e][a] = 0
        }
        for (let a = 0; a < e.userStartup.city_map.entities.length; a++) {
            let n = e.userStartup.city_map.entities[a]
              , i = e.findBuilding(n.cityentity_id);
            if (i)
                for (let e = n.x || 0; e < n.x + i.width; e++)
                    for (let a = n.y || 0; a < n.y + i.length; a++)
                        void 0 !== t[e] && void 0 !== t[e][a] && (t[e][a] = 1)
        }
        return t
    },
    calculateProvision: function(e, t, a, n) {
        const i = this;
        if (i.isEvolvingBuilding(e) && t)
            for (let s = 0; s < i.game.evolving.length; s++) {
                let o = i.game.evolving[s];
                if (o.baseName === e.base_name)
                    for (let e = 0; e < o.stages.length; e++) {
                        let i = o.stages[e];
                        if (Number(i.id) === Number(t))
                            for (let e = 0; e < i.provisions.length; e++) {
                                let t = i.provisions[e];
                                if (t.name === a)
                                    return Math.floor(n * t.value)
                            }
                    }
            }
        return n
    },
    calculateRelicBoost: function(e, t) {
        const a = this;
        let n = 0
          , i = !1;
        for (let s = 0; s < a.userStartup.ea_data.relicBoosts.length; s++) {
            let o = a.userStartup.ea_data.relicBoosts[s];
            if (o.good_id === e && o.good_type === t) {
                for (let e = 0; e < a.userStartup.ea_data.relicCounts.length; e++) {
                    let t = a.userStartup.ea_data.relicCounts[e];
                    if (t.relic_id === o.good_id) {
                        for (let e = 0; e < a.game.startup.production_boost.length; e++) {
                            let i = a.game.startup.production_boost[e];
                            if (i.relics_needed > t.amount)
                                break;
                            n = i.boost - 1
                        }
                        break
                    }
                }
                i = !0;
                break
            }
        }
        if (i)
            switch (t) {
            case "common":
                for (let e = 0; e < a.userStartup.city_map.entities.length; e++) {
                    let t = a.userStartup.city_map.entities[e]
                      , i = a.findBuilding(t.cityentity_id);
                    if (i && "B_Dwarfs_AW2" === i.base_name) {
                        let e = a.getEffectValue("manufactories_production_boost", i);
                        isNaN(e) || (n += e);
                        break
                    }
                }
                break;
            case "sentient":
                for (let e = 0; e < a.userStartup.city_map.entities.length; e++) {
                    let t = a.userStartup.city_map.entities[e]
                      , i = a.findBuilding(t.cityentity_id);
                    if (i && "B_Gr9_AW1" === i.base_name) {
                        let e = a.getEffectValue("sentient_goods_production_boost", i);
                        isNaN(e) || (n += e - 1);
                        break
                    }
                }
            }
        return n
    },
    calculateBoostedAmount: function(e, t) {
        const a = this;
        let n = 0;
        switch (e) {
        case "money":
        case "supplies":
            a.userStartup.ea_data.cultureBonus && (t = Math.ceil(t * a.userStartup.ea_data.cultureBonus));
            break;
        case "marble":
        case "steel":
        case "planks":
        case "crystal":
        case "scrolls":
        case "silk":
        case "elixir":
        case "magic_dust":
        case "gems":
            (n = a.calculateRelicBoost(e, "common")) > 0 && (t = Math.ceil(t * (1 + n)));
            break;
        case "sentientmarble":
        case "sentientsteel":
        case "sentientplanks":
        case "sentientcrystal":
        case "sentientscrolls":
        case "sentientsilk":
        case "sentientelixir":
        case "sentientmagic_dust":
        case "sentientgems":
            (n = a.calculateRelicBoost(e.replace("sentient", ""), "sentient")) > 0 && (t = Math.ceil(t * (1 + n)))
        }
        return t
    },
    calculateDailyAmount: function(e, t) {
        return Math.ceil(e * (this.constants.time.secondsPer1d / t))
    },
    addReportSort: function(e) {
        e.each(function() {
            let e = $(this)
              , t = e.find("thead [data-sort]");
            t.on("click", function() {
                let a = $(this);
                t.find("i").remove(),
                e.data("sort") === a.data("sort") && "asc" === e.data("sort-dir") ? (a.append('<i class="yellow long arrow alternate down fitted icon"></i>'),
                e.data("sort-dir", "desc")) : (a.append('<i class="yellow long arrow alternate up fitted icon"></i>'),
                e.data("sort", a.data("sort")),
                e.data("sort-dir", "asc"));
                let n = e.data("sort")
                  , i = e.data("sort-dir")
                  , s = e.find("tbody");
                s.children().sort(function(e, t) {
                    return "desc" === i ? $(e).data("sort-" + n) < $(t).data("sort-" + n) ? 1 : -1 : $(e).data("sort-" + n) > $(t).data("sort-" + n) ? 1 : -1
                }).appendTo(s)
            })
        })
    },
    clearReportSort: function(e) {
        e.data({
            sort: "",
            "sort-dir": ""
        }).find("thead [data-sort] i").remove()
    },
    createReportQuantityCell: function(e) {
        let t = $('<td class="center aligned" data-cell="quantity"></td>').data({
            value: e,
            sort: e
        });
        return "number" == typeof e ? t.text(e.toLocaleString(this.variables.locale)) : "string" == typeof e && t.text(e),
        t
    },
    createReportBuildingCell: function(e, t) {
        let a = $("<td></td>");
        return "object" == typeof e ? a.append('<i class="my-icon"></i>').append(e.name).append('<div class="right">' + this.getLevelText(e, t) + (t ? ", " + this.getStageText(t) : "") + "</div>") : "string" == typeof e && a.append(e),
        a
    },
    createReportUnitCell: function(e, t) {
        const a = $("<td></td>");
        return "number" == typeof e ? a.append(e.toLocaleString(this.variables.locale)) : "string" == typeof e && a.append(e),
        "object" == typeof t && a.append('<div class="right">' + (e / t.width / t.length).toLocaleString(this.variables.locale, {
            minimumFractionDigits: 2,
            maximumFractionDigits: 2
        }) + "</div>"),
        a
    },
    createReportProductionManualCell: function(e, t) {
        const a = this;
        let n = $('<td class="center aligned" data-cell="collection"></td>')
          , i = null;
        for (let e = 0; e < a.userStartup.ea_data.producing.length; e++) {
            let n = a.userStartup.ea_data.producing[e];
            if (n.cityentity_id === t.id) {
                i = Number(n.production_option);
                break
            }
        }
        let s = $('<div class="ui dropdown"><input type="hidden" /><div class="text"></div><i class="dropdown icon"></i><div class="menu"></div></div>').data({
            cityentity_id: t.id,
            resource: e
        }).appendTo(n);
        i && s.find('input[type="hidden"]').val(i),
        $('<div class="item"></div>').attr("data-value", "").html('<span class="asset disabled"><img src="/img/icons/resources/' + e + '.png" alt="' + e + '" /></span> None').appendTo(s.find(".menu"));
        for (let o = 0; o < t.production.products.length; o++) {
            let l = t.production.products[o];
            if (l.revenue) {
                let t = Object.keys(l.revenue.resources)[0]
                  , o = l.revenue.resources[t]
                  , r = a.calculateBoostedAmount(t, o)
                  , d = r > o;
                $('<div class="item"></div>').attr("data-value", l.production_option).data({
                    resource: t,
                    amount: r,
                    time: l.production_time
                }).html(a.createReportProductionHtml(t, d, r, l.production_time)).appendTo(s.find(".menu")),
                l.production_option === i && t === e && n.data({
                    amount: r,
                    time: l.production_time
                })
            }
        }
        return s.dropdown({
            onChange: function(e, t, n) {
                let i = $(this)
                  , s = i.closest('td[data-cell="collection"]')
                  , o = i.data("cityentity_id");
                n.data("resource") === i.data("resource") ? s.data({
                    amount: n.data("amount"),
                    time: n.data("time")
                }) : s.data({
                    amount: "",
                    time: ""
                }),
                s.closest("tr").trigger("refresh-row").closest("table").trigger("refresh-footer");
                let l = !1;
                for (let t = 0; t < a.userStartup.ea_data.producing.length; t++)
                    if (a.userStartup.ea_data.producing[t].cityentity_id === o) {
                        "" === e ? a.userStartup.ea_data.producing.splice(t, 1) : a.userStartup.ea_data.producing[t].production_option = Number(e),
                        l = !0;
                        break
                    }
                l || a.userStartup.ea_data.producing.push({
                    cityentity_id: o,
                    production_option: Number(e)
                })
            }
        }),
        n
    },
    createReportProductionAutomaticCell: function(e, t, a, n) {
        const i = this;
        let s = t
          , o = !1;
        return n && (o = (s = i.calculateBoostedAmount(e, t)) > t),
        $('<td class="center aligned" data-cell="collection"></td>').data({
            amount: s,
            time: a
        }).html(i.createReportProductionHtml(e, o, s, a))
    },
    createReportProductionHtml: function(e, t, a, n) {
        return '<span class="asset' + (t ? " boosted" : "") + '"><img src="/img/icons/resources/' + e + '.png" alt="' + e + '" /></span> ' + (a || 0).toLocaleString(this.variables.locale) + ' <span class="text-grey">in</span> ' + this.convertToFriendlyTime(n)
    },
    createReportSubtotalCell: function(e) {
        return $('<td class="right aligned" data-cell="subtotal"></td>').text(e.toLocaleString(this.variables.locale))
    },
    getEventPageY: function(e) {
        return e.type,
        e.pageY
    },
    getEventPageX: function(e) {
        return e.type,
        e.pageX
    }
};
